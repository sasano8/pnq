{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PNQ User-friendly collection manipulation library. PNQ is a Python implementation like Language Integrated Query (LINQ). https://pypi.org/project/pnq/ Danger PNQ\u306f\u30d9\u30fc\u30bf\u7248\u3067\u3059\u3002 \u73fe\u5728\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068API\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u3002 PNQ\u306f\u92ed\u610f\u958b\u767a\u4e2d\u3067API\u304c\u983b\u7e41\u306b\u5909\u66f4\u3055\u308c\u308b\u6050\u308c\u304c\u3042\u308b\u305f\u3081\u3001\u672c\u756a\u74b0\u5883\u3067\u306f\u5229\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 Features \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306b\u95a2\u3059\u308b\u591a\u5f69\u306a\u64cd\u4f5c \u30a2\u30af\u30bb\u30b7\u30d6\u30eb\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 \u578b\u30d2\u30f3\u30c8\u306e\u6d3b\u7528 Documentation Dependencies Python 3.7+ Installation Install with pip: $ pip install pnq Getting Started import pnq pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . to_list () # >> [2] pnq . query ({ \"a\" : 1 , \"b\" : 2 }) . filter ( lambda x : x [ 0 ] == \"a\" ) . to_list () # >> [(\"a\", 1)]","title":"\u306f\u3058\u3081\u306b"},{"location":"#features","text":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306b\u95a2\u3059\u308b\u591a\u5f69\u306a\u64cd\u4f5c \u30a2\u30af\u30bb\u30b7\u30d6\u30eb\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 \u578b\u30d2\u30f3\u30c8\u306e\u6d3b\u7528","title":"Features"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#dependencies","text":"Python 3.7+","title":"Dependencies"},{"location":"#installation","text":"Install with pip: $ pip install pnq","title":"Installation"},{"location":"#getting-started","text":"import pnq pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . to_list () # >> [2] pnq . query ({ \"a\" : 1 , \"b\" : 2 }) . filter ( lambda x : x [ 0 ] == \"a\" ) . to_list () # >> [(\"a\", 1)]","title":"Getting Started"},{"location":"advanced_usage/","text":"\u8f9e\u66f8\u306e\u6b63\u898f\u5316 \u30ea\u30b9\u30c8\u3068\u8f9e\u66f8\u306e __iter__ \u306f\u305d\u308c\u305e\u308c\u5024\u3068\u30ad\u30fc\u3092\u8fd4\u3059\u3068\u3044\u3046\u6319\u52d5\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002 for val in [ 5 , 6 , 7 ]: print ( val ) # => 5 # => 6 # => 7 for val in { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }: print ( val ) # => \"a\" # => \"b\" # => \"c\" pnq \u306f\u3001\u30ea\u30b9\u30c8\u3068\u8f9e\u66f8\u306e\u6319\u52d5\u3092\u63c3\u3048\u308b\u305f\u3081\u6b21\u306e\u3088\u3046\u306a\u632f\u308b\u821e\u3044\u3092\u3057\u307e\u3059\u3002 pnq.query \u3067\u30e9\u30c3\u30d7\u3055\u308c\u305f\u8f9e\u66f8\u306f\u8f9e\u66f8\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3044\u307e\u3059\u3002 for val in pnq . query ({ \"a\" : 5 , \"b\" : 6 , \"c\" : 7 }): print ( val ) # => \"a\" # => \"b\" # => \"c\" \u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u4ecb\u3059\u308b\u3068\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u30da\u30a2\u3092\u5217\u6319\u3059\u308b\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002 for val in pnq . query ({ \"a\" : 5 , \"b\" : 6 , \"c\" : 7 }) . filter ( lambda x : True ): print ( val ) # => (\"a\", 5) # => (\"b\", 6) # => (\"c\", 7) \u4f8b\u3048\u3070\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u7570\u306a\u308b\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 data = { \"a\" : 5 , \"b\" : 6 , \"c\" : 7 } result_1 = pnq . query ( data ) . to ( list ) # => [(\"a\", 5), (\"b\", 6), (\"c\", 7)] result_1 = list ( pnq . query ( data )) # => [\"a\", \"b\", \"c\"] \u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u3067\u30c1\u30a7\u30fc\u30f3\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u8981\u6c42\u3055\u308c\u308b\u3068\u5185\u90e8\u7684\u306b __piter__ \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 for val in pnq . query ({ \"a\" : 5 , \"b\" : 6 , \"c\" : 7 }) . __piter__ (): print ( val ) # => (\"a\", 5) # => (\"b\", 6) # => (\"c\", 7) Warning pnq.query \u3067\u53d7\u3051\u53d6\u3063\u305f\u76f4\u5f8c\u306e\u8f9e\u66f8\u3068\u3001\u4e00\u5ea6\u3067\u3082\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u305f\u5834\u5408\u306b\u5217\u6319\u3055\u308c\u308b\u8981\u7d20\u306f\u7570\u306a\u308b\u3053\u3068\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 \u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf pnq \u306f\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Python\u306e\u7d44\u8fbc\u307f\u95a2\u6570\u306b\u306f\u3044\u304f\u3064\u304b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6b21\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 it = filter ( lambda x : True , [ 1 , 2 , 3 ]) result_1 = list ( it ) # => [1, 2, 3] result_2 = list ( it ) # => [] 2\u56de\u76ee\u306e\u5b9f\u884c\u3067\u306f\u3001\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u3053\u308c\u306f\u3001 filter \u95a2\u6570\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u3001\u5217\u6319\u3055\u308c\u305f\u8981\u7d20\u306f\u6d88\u8cbb\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3067\u3059\u3002 pnq \u3067\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u66b4\u9732\u3055\u305b\u305a\u30a4\u30c6\u30e9\u30d6\u30eb\u3068\u3057\u3066\u52d5\u4f5c\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u8981\u6c42\u6642\u306b\u6bce\u56de\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u3001\u5e38\u306b\u540c\u3058\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 it = pnq . query ([ 1 , 2 , 3 ]) . filter ( lambda x : True ) result_1 = list ( it ) # => [1, 2, 3] result_2 = list ( it ) # => [1, 2, 3] \u305f\u3060\u3057\u3001\u30bd\u30fc\u30b9\u304c\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5834\u5408\u306f\u30bd\u30fc\u30b9\u306e\u6319\u52d5\u306b\u6e96\u62e0\u3057\u307e\u3059\u3002 it = pnq . query ( filter ( lambda x : True , [ 1 , 2 , 3 ])) result_1 = list ( it ) # => [1, 2, 3] result_2 = list ( it ) # => [] \u9045\u5ef6\u8a55\u4fa1\u30fb\u5373\u6642\u8a55\u4fa1 \u30ad\u30e3\u30c3\u30b7\u30e5 \u975e\u540c\u671f\u51e6\u7406 \u975e\u540c\u671f\u30af\u30a8\u30ea\u306e\u5b9f\u884c \u975e\u540c\u671f\u95a2\u6570\u3092\u542b\u3080\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f request \u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u307e\u305f\u3001\u30af\u30a8\u30ea\u3092\u975e\u540c\u671f\u3067\u30a4\u30c6\u30ec\u30fc\u30c8\uff08 async for ... \uff09\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 import asyncio async def sleep ( seconds ): await asyncio . sleep ( seconds ) return seconds async def main (): async for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . request ( sleep ): print ( x ) asyncio . run ( main ()) \u540c\u671f\u30af\u30a8\u30ea\u306e\u5b9f\u884c \u30af\u30a8\u30ea\u306f __iter__ \u3068 __aiter__ \u3092\u5099\u3048\u3001\u540c\u671f\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u30b3\u30fc\u30c9\u306e\u4e92\u63db\u6027\u3092\u6700\u5927\u9650\u306b\u4fdd\u3063\u3066\u3044\u307e\u3059\u3002 request \u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570\u304c\u975e\u540c\u671f\u3067\u306a\u3044\u5834\u5408\u3001\u3044\u3064\u3082\u901a\u308a for \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 request \u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570\u304c\u975e\u540c\u671f\u306e\u5834\u5408\u306f\u3001\u540c\u671f\u30af\u30a8\u30ea\u3067\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002 import time def sleep ( seconds ): time . sleep ( seconds ) return seconds def main (): for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . request ( sleep ): print ( x ) main () \u30b9\u30ea\u30fc\u30d7 pnq \u306f sleep \u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 sleep \u306f\u3001\u5b9f\u884c\u5f62\u5f0f\uff08for/async for\uff09\u306b\u5fdc\u3058\u3066\u3001 time.sleep \u3068 asyncio.sleep \u3092\u4f7f\u3044\u5206\u3051\u307e\u3059\u3002 sleep \u306f\u3001\u6307\u5b9a\u3057\u305f\u79d2\u6570\u3060\u3051\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u305f\u5f8c\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092\u5f8c\u7d9a\u306e\u30c1\u30a7\u30a4\u30f3\u306b\u53d7\u3051\u6d41\u3057\u307e\u3059\u3002 def main (): for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . sleep ( 1 ) . request ( lambda x : x ): print ( x ) main () \u975e\u540c\u671f\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406 pnq \u306f\u975e\u540c\u671f\u51e6\u7406\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u8981\u6c42\u304b\u3089\u4fdd\u8b77\u3057\u307e\u305b\u3093\u3002 \u3059\u306a\u308f\u3061\u3001\u30b7\u30b9\u30c6\u30e0\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u8981\u6c42\u3092\u691c\u77e5\u3059\u308b\u3068\u3001\u51e6\u7406\u306f\u6b21\u56de\u306eawait\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u3001\u4e0d\u5b8c\u5168\u306a\u72b6\u614b\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u51e6\u7406\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\u306e\u3092\u9632\u3050\u306b\u306f\u3001 pnq \u306e\u5916\u3067\u4f55\u3089\u304b\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3072\u3068\u3064\u306e\u65b9\u6cd5\u3068\u3057\u3066\u3001 asyncio.shield \u3067\u30b3\u30eb\u30fc\u30c1\u30f3\u3092\u4fdd\u8b77\u3057\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u4eca\u5ea6\u306f\u9006\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u65b0\u305f\u306a\u554f\u984c\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002 \u975e\u540c\u671f\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406\u306f\u96e3\u3057\u304f\u3001\u4f55\u304b\u975e\u540c\u671f\u51e6\u7406\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002 import asyncio async def sleep ( seconds ): await asyncio . sleep ( seconds ) yield seconds async def main (): async for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . request ( sleep ): print ( x ) asyncio . run ( asyncio . shield ( main ())) \u4f8b\u5916\u51e6\u7406 request \u306f\u3001\u5b9f\u884c\u7d50\u679c\u3092 params err result detail \u306e\u30bf\u30d7\u30eb\u3068\u3057\u3066\u53d7\u3051\u6e21\u3057\u307e\u3059\u3002 err \u304c None \u3067\u306a\u3044\u5834\u5408\u3001\u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u3068\u307f\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u6b21\u306e\u3088\u3046\u306b\u30c8\u30ec\u30fc\u30b9\u30d0\u30c3\u30af\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 import traceback for params , err , result , detail in some_requests : if err : msg = \"\" . join ( traceback . format_exception ( etype = type ( err ), value = err , tb = err . __traceback__ ) ) # raise Exception(\"err\") from err print ( msg ) else : print ( result ) \u6b8b\u3063\u3066\u3044\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3082\u3044\u3044\u3067\u3057\u3087\u3046\u3002 import traceback for params , err , result , detail in some_requests : if err : raise RuntimeError ( f \"RequestError: { params } => { err } \" ) from err else : print ( result )","title":"\u9ad8\u5ea6\u306a\u4f7f\u7528\u65b9\u6cd5"},{"location":"advanced_usage/#_1","text":"\u30ea\u30b9\u30c8\u3068\u8f9e\u66f8\u306e __iter__ \u306f\u305d\u308c\u305e\u308c\u5024\u3068\u30ad\u30fc\u3092\u8fd4\u3059\u3068\u3044\u3046\u6319\u52d5\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002 for val in [ 5 , 6 , 7 ]: print ( val ) # => 5 # => 6 # => 7 for val in { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }: print ( val ) # => \"a\" # => \"b\" # => \"c\" pnq \u306f\u3001\u30ea\u30b9\u30c8\u3068\u8f9e\u66f8\u306e\u6319\u52d5\u3092\u63c3\u3048\u308b\u305f\u3081\u6b21\u306e\u3088\u3046\u306a\u632f\u308b\u821e\u3044\u3092\u3057\u307e\u3059\u3002 pnq.query \u3067\u30e9\u30c3\u30d7\u3055\u308c\u305f\u8f9e\u66f8\u306f\u8f9e\u66f8\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3044\u307e\u3059\u3002 for val in pnq . query ({ \"a\" : 5 , \"b\" : 6 , \"c\" : 7 }): print ( val ) # => \"a\" # => \"b\" # => \"c\" \u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u4ecb\u3059\u308b\u3068\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u30da\u30a2\u3092\u5217\u6319\u3059\u308b\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002 for val in pnq . query ({ \"a\" : 5 , \"b\" : 6 , \"c\" : 7 }) . filter ( lambda x : True ): print ( val ) # => (\"a\", 5) # => (\"b\", 6) # => (\"c\", 7) \u4f8b\u3048\u3070\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u7570\u306a\u308b\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 data = { \"a\" : 5 , \"b\" : 6 , \"c\" : 7 } result_1 = pnq . query ( data ) . to ( list ) # => [(\"a\", 5), (\"b\", 6), (\"c\", 7)] result_1 = list ( pnq . query ( data )) # => [\"a\", \"b\", \"c\"] \u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u3067\u30c1\u30a7\u30fc\u30f3\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u8981\u6c42\u3055\u308c\u308b\u3068\u5185\u90e8\u7684\u306b __piter__ \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 for val in pnq . query ({ \"a\" : 5 , \"b\" : 6 , \"c\" : 7 }) . __piter__ (): print ( val ) # => (\"a\", 5) # => (\"b\", 6) # => (\"c\", 7) Warning pnq.query \u3067\u53d7\u3051\u53d6\u3063\u305f\u76f4\u5f8c\u306e\u8f9e\u66f8\u3068\u3001\u4e00\u5ea6\u3067\u3082\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u305f\u5834\u5408\u306b\u5217\u6319\u3055\u308c\u308b\u8981\u7d20\u306f\u7570\u306a\u308b\u3053\u3068\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059","title":"\u8f9e\u66f8\u306e\u6b63\u898f\u5316"},{"location":"advanced_usage/#_2","text":"pnq \u306f\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Python\u306e\u7d44\u8fbc\u307f\u95a2\u6570\u306b\u306f\u3044\u304f\u3064\u304b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6b21\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 it = filter ( lambda x : True , [ 1 , 2 , 3 ]) result_1 = list ( it ) # => [1, 2, 3] result_2 = list ( it ) # => [] 2\u56de\u76ee\u306e\u5b9f\u884c\u3067\u306f\u3001\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u3053\u308c\u306f\u3001 filter \u95a2\u6570\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u3001\u5217\u6319\u3055\u308c\u305f\u8981\u7d20\u306f\u6d88\u8cbb\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3067\u3059\u3002 pnq \u3067\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u66b4\u9732\u3055\u305b\u305a\u30a4\u30c6\u30e9\u30d6\u30eb\u3068\u3057\u3066\u52d5\u4f5c\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u8981\u6c42\u6642\u306b\u6bce\u56de\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u3001\u5e38\u306b\u540c\u3058\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 it = pnq . query ([ 1 , 2 , 3 ]) . filter ( lambda x : True ) result_1 = list ( it ) # => [1, 2, 3] result_2 = list ( it ) # => [1, 2, 3] \u305f\u3060\u3057\u3001\u30bd\u30fc\u30b9\u304c\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5834\u5408\u306f\u30bd\u30fc\u30b9\u306e\u6319\u52d5\u306b\u6e96\u62e0\u3057\u307e\u3059\u3002 it = pnq . query ( filter ( lambda x : True , [ 1 , 2 , 3 ])) result_1 = list ( it ) # => [1, 2, 3] result_2 = list ( it ) # => []","title":"\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf"},{"location":"advanced_usage/#_3","text":"","title":"\u9045\u5ef6\u8a55\u4fa1\u30fb\u5373\u6642\u8a55\u4fa1"},{"location":"advanced_usage/#_4","text":"","title":"\u30ad\u30e3\u30c3\u30b7\u30e5"},{"location":"advanced_usage/#_5","text":"","title":"\u975e\u540c\u671f\u51e6\u7406"},{"location":"advanced_usage/#_6","text":"\u975e\u540c\u671f\u95a2\u6570\u3092\u542b\u3080\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f request \u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u307e\u305f\u3001\u30af\u30a8\u30ea\u3092\u975e\u540c\u671f\u3067\u30a4\u30c6\u30ec\u30fc\u30c8\uff08 async for ... \uff09\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 import asyncio async def sleep ( seconds ): await asyncio . sleep ( seconds ) return seconds async def main (): async for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . request ( sleep ): print ( x ) asyncio . run ( main ())","title":"\u975e\u540c\u671f\u30af\u30a8\u30ea\u306e\u5b9f\u884c"},{"location":"advanced_usage/#_7","text":"\u30af\u30a8\u30ea\u306f __iter__ \u3068 __aiter__ \u3092\u5099\u3048\u3001\u540c\u671f\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u30b3\u30fc\u30c9\u306e\u4e92\u63db\u6027\u3092\u6700\u5927\u9650\u306b\u4fdd\u3063\u3066\u3044\u307e\u3059\u3002 request \u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570\u304c\u975e\u540c\u671f\u3067\u306a\u3044\u5834\u5408\u3001\u3044\u3064\u3082\u901a\u308a for \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 request \u3067\u5b9f\u884c\u3059\u308b\u95a2\u6570\u304c\u975e\u540c\u671f\u306e\u5834\u5408\u306f\u3001\u540c\u671f\u30af\u30a8\u30ea\u3067\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3002 import time def sleep ( seconds ): time . sleep ( seconds ) return seconds def main (): for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . request ( sleep ): print ( x ) main ()","title":"\u540c\u671f\u30af\u30a8\u30ea\u306e\u5b9f\u884c"},{"location":"advanced_usage/#_8","text":"pnq \u306f sleep \u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 sleep \u306f\u3001\u5b9f\u884c\u5f62\u5f0f\uff08for/async for\uff09\u306b\u5fdc\u3058\u3066\u3001 time.sleep \u3068 asyncio.sleep \u3092\u4f7f\u3044\u5206\u3051\u307e\u3059\u3002 sleep \u306f\u3001\u6307\u5b9a\u3057\u305f\u79d2\u6570\u3060\u3051\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u305f\u5f8c\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092\u5f8c\u7d9a\u306e\u30c1\u30a7\u30a4\u30f3\u306b\u53d7\u3051\u6d41\u3057\u307e\u3059\u3002 def main (): for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . sleep ( 1 ) . request ( lambda x : x ): print ( x ) main ()","title":"\u30b9\u30ea\u30fc\u30d7"},{"location":"advanced_usage/#_9","text":"pnq \u306f\u975e\u540c\u671f\u51e6\u7406\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u8981\u6c42\u304b\u3089\u4fdd\u8b77\u3057\u307e\u305b\u3093\u3002 \u3059\u306a\u308f\u3061\u3001\u30b7\u30b9\u30c6\u30e0\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u8981\u6c42\u3092\u691c\u77e5\u3059\u308b\u3068\u3001\u51e6\u7406\u306f\u6b21\u56de\u306eawait\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u3001\u4e0d\u5b8c\u5168\u306a\u72b6\u614b\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u51e6\u7406\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\u306e\u3092\u9632\u3050\u306b\u306f\u3001 pnq \u306e\u5916\u3067\u4f55\u3089\u304b\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3072\u3068\u3064\u306e\u65b9\u6cd5\u3068\u3057\u3066\u3001 asyncio.shield \u3067\u30b3\u30eb\u30fc\u30c1\u30f3\u3092\u4fdd\u8b77\u3057\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u4eca\u5ea6\u306f\u9006\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u65b0\u305f\u306a\u554f\u984c\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002 \u975e\u540c\u671f\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406\u306f\u96e3\u3057\u304f\u3001\u4f55\u304b\u975e\u540c\u671f\u51e6\u7406\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002 import asyncio async def sleep ( seconds ): await asyncio . sleep ( seconds ) yield seconds async def main (): async for x in pnq . infinite ( lambda : 5 ) . take ( 5 ) . request ( sleep ): print ( x ) asyncio . run ( asyncio . shield ( main ()))","title":"\u975e\u540c\u671f\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406"},{"location":"advanced_usage/#_10","text":"request \u306f\u3001\u5b9f\u884c\u7d50\u679c\u3092 params err result detail \u306e\u30bf\u30d7\u30eb\u3068\u3057\u3066\u53d7\u3051\u6e21\u3057\u307e\u3059\u3002 err \u304c None \u3067\u306a\u3044\u5834\u5408\u3001\u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u3068\u307f\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u6b21\u306e\u3088\u3046\u306b\u30c8\u30ec\u30fc\u30b9\u30d0\u30c3\u30af\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 import traceback for params , err , result , detail in some_requests : if err : msg = \"\" . join ( traceback . format_exception ( etype = type ( err ), value = err , tb = err . __traceback__ ) ) # raise Exception(\"err\") from err print ( msg ) else : print ( result ) \u6b8b\u3063\u3066\u3044\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3082\u3044\u3044\u3067\u3057\u3087\u3046\u3002 import traceback for params , err , result , detail in some_requests : if err : raise RuntimeError ( f \"RequestError: { params } => { err } \" ) from err else : print ( result )","title":"\u4f8b\u5916\u51e6\u7406"},{"location":"api/","text":"Developer Interface Generating pnq.actions. iter ( self ) \u30a4\u30c6\u30e9\u30d6\u30eb\u307e\u305f\u306f\u30de\u30c3\u30d4\u30f3\u30b0\u304b\u3089\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u30de\u30c3\u30d4\u30f3\u30b0\u306e\u5834\u5408\u306f\u3001\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Parameters: self: \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u30a4\u30c6\u30e9\u30d6\u30eb\u307e\u305f\u306f\u30de\u30c3\u30d4\u30f3\u30b0 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.iter([1, 2]).to_list() [1, 2] >>> pnq.iter([{\"id\": 1, \"name\": \"bob\"}]).to_list() [(\"id\", 1), (\"name\", \"bob\")] pnq.actions. infinite ( func , *args , **kwargs ) \u6e21\u3057\u305f\u95a2\u6570\u3092\u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parameters: func(args, kwargs): \u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u95a2\u6570 args: \u95a2\u6570\u306b\u6e21\u3059\u4f4d\u7f6e\u5f15\u6570 kwargs: \u95a2\u6570\u306b\u6e21\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.infinite(datetime.now).take(1).to_list() [datetime.datetime(2021, 9, 10, 3, 57, 54, 402467)] >>> pnq.infinite(datetime, 2020, 1, day=2).take(1).to_list() [datetime.datetime(2010, 1, 2, 0, 0)] pnq.actions. repeat ( value ) \u540c\u3058\u5024\u3092\u7e70\u308a\u8fd4\u3059\u7121\u9650\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: value: \u7e70\u308a\u8fd4\u3059\u5024 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.repeat(5).take(3).to_list() [5, 5, 5] pnq.actions. value ( *args , **kwargs ) \uff11\u3064\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: value: \u8fd4\u3059\u5024 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.value(1).to_list() [1] >>> pnq.value(name=\"test\").to_list() [{\"naem\": \"test\"}] pnq.actions. count ( start=0 , step=1 ) \u9023\u7d9a\u3057\u305f\u5024\u3092\u7121\u9650\u306b\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parameters: start: \u958b\u59cb\u5024 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.count().take(3).to_list() [0, 1, 2] >>> pnq.count(1, 2).take(3).to_list() [1, 3, 5] pnq.actions. cycle ( iterable , repeat=None ) \u30a4\u30c6\u30e9\u30d6\u30eb\u304c\u8fd4\u3059\u5024\u3092\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: iterable: \u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30e9\u30d6\u30eb repeat: \u7e70\u308a\u8fd4\u3059\u56de\u6570\u3002None\u306e\u5834\u5408\u306f\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.cycle([1,2,3]).take(4).to_list() [1, 2, 3, 1] >>> pnq.cycle([1,2,3], repeat=2).to_list() [1, 2, 3, 1, 2, 3] pnq.actions. range ( *args , **kwargs ) \u6307\u5b9a\u3057\u305f\u958b\u59cb\u6570\u3068\u7d42\u4e86\u6570\u307e\u3067\u306e\u9023\u7d9a\u3057\u305f\u5024\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: stop: \u7d42\u4e86\u6570 Parameters: start: \u958b\u59cb\u6570 stop: \u7d42\u4e86\u6570 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.range(5).to(list) [0, 1, 2, 3, 4] >>> pnq.range(0, 3, 2).to(list) [0, 2, 4] Mapping pnq.actions. map ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 str\u95a2\u6570\u3092\u6e21\u3057\u305f\u5834\u5408\u3001\u5229\u4fbf\u6027\u306e\u305f\u3081 None \u306f \"\" \u3092\u8fd4\u3057\u307e\u3059\uff08Python\u306e\u6a19\u6e96\u52d5\u4f5c\u306f \"None\" \u3092\u8fd4\u3057\u307e\u3059\uff09\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(x): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u542b\u3080\u30af\u30a8\u30ea Usage: >>> pnq.query([1]).map(lambda x: x * 2).to_list() [2] >>> pnq.query([None]).map(str).to_list() [\"\"] pnq.actions. unpack ( self , selector ) unpack_pos\u304bunpack_kw\u306e\u5225\u540d\u306b\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002 pnq.actions. unpack_pos ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector( args): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).unpack_pos(lambda arg1, arg2: arg1)).to_list() [1] >>> pnq.query([(1, 2, 3, 4, 5)]).unpack_pos(lambda arg1, arg2, args: args).to_list() [(3, 4, 5)] pnq.actions. unpack_kw ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(kwargs): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([{\"id\": 1, \"name\": \"bob\"}]).unpack_kw(lambda id, name: name)).to_list() [\"bob\"] >>> pnq.query([{\"id\": 1, \"name\": \"bob\", \"age\": 20}]).unpack_kw(lambda id, name, **kwargs: kwargs)).to_list() [{\"age\": 20}] pnq.actions. select ( self , item , *items ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3068\u3057\u3066\u5c04\u5f71\u3057\u307e\u3059\u3002 select_item \u306e\u5225\u540d\u3067\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 item: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 items: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select(0).to_list() [1] >>> pnq.query([{\"id\": 1, \"name\": \"a\"}]).select(\"id\", \"name\").to_list() [(1, \"a\")] >>> id, name = pnq.query([{\"id\": 1, \"name\": \"a\"}]).select(\"id\", \"name\") pnq.actions. select_as_dict ( self , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027\u3092\u9078\u629e\u3057\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 fields: \u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u542b\u3080\u8f9e\u66f8\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_as_dict(0).to_list() [{0: 1}] >>> pnq.query([{\"id\": 1, \"name\": \"a\", \"age\": 20}]).select_as_dict(\"id\", \"name\").to_list() [{\"id\": 1, \"name\": \"a\"}] pnq.actions. select_as_tuple ( self , *fields , attr=False ) pnq.actions. select_item ( self , item , *items ) select \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 pnq.actions. select_attr ( self , attr , *attrs ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u5c5e\u6027\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u5c5e\u6027\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3068\u3057\u3066\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 attr: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u5c5e\u6027 attrs: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u5c5e\u6027 Returns: \u9078\u629e\u3057\u305f\u5c5e\u6027\u307e\u305f\u306f\u8907\u6570\u306e\u5c5e\u6027\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> obj = Person(id=1, name=\"bob\") >>> pnq.query([obj]).select_attr(\"name\").to_list() [\"bob\"] >>> pnq.query([obj]).select_attr(\"id\", \"name\").to_list() [(1, \"bob\")] pnq.actions. select_items ( self , *items ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 select_item \u3068\u7570\u306a\u308a\u3001\u5e38\u306b\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 items: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 Returns: \u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_items(0).to_list() [(1,)] >>> pnq.query([{\"id\": 1, \"name\": \"a\"}]).select_items(\"id\", \"name\").to_list() [(1, \"a\")] pnq.actions. select_attrs ( self , *attrs ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u8907\u6570\u306e\u5c5e\u6027\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 select_attr \u3068\u7570\u306a\u308a\u3001\u5e38\u306b\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 attrs: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u5c5e\u6027 Returns: \u8907\u6570\u306e\u5c5e\u6027\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> obj = Person(id=1, name=\"bob\") >>> pnq.query([obj]).select_attrs(\"name\").to_list() [(\"bob\",)] >>> pnq.query([obj]).select_attrs(\"id\", \"name\").to_list() [(1, \"bob\")] pnq.actions. cast ( self , type ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u578b\u6ce8\u91c8\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u30a8\u30c7\u30a3\u30bf\u306e\u578b\u89e3\u91c8\u3092\u52a9\u3051\u308b\u305f\u3081\u3060\u3051\u306b\u5b58\u5728\u3057\u3001\u4f55\u3082\u51e6\u7406\u3092\u884c\u3044\u307e\u305b\u3093\u3002 \u5b9f\u969b\u306b\u578b\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f\u3001 map \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 type: \u65b0\u3057\u3044\u578b\u6ce8\u91c8 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query([1]).cast(float) pnq.actions. enumerate ( self , start=0 , step=1 ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 start: \u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 step: \u5897\u5206 Returns: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).enumrate().to_list() [(0, 1), (1, 2)] >>> pnq.query([1, 2]).enumrate(5).to_list() [(5, 1), (6, 2)] >>> pnq.query([1, 2]).enumrate(0, 10)).to_list() [(0, 1), (10, 2)] pnq.actions. group_by ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3067\u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u53d6\u5f97\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u5404\u8981\u7d20\u304c\u3059\u3067\u306b\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 Returns: \u30ad\u30fc\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> data = [ >>> {\"name\": \"banana\", \"color\": \"yellow\", \"count\": 3}, >>> {\"name\": \"apple\", \"color\": \"red\", \"count\": 2}, >>> {\"name\": \"strawberry\", \"color\": \"red\", \"count\": 5}, >>> ] >>> pnq.query(data).group_by(lambda x: x[\"color\"], x[\"name\"]).to_list() [(\"yellow\": [\"banana\"]), (\"red\": [\"apple\", \"strawberry\"])] >>> pnq.query(data).select(\"color\", \"count\").group_by().to_dict() {\"yellow\": [3], \"red\": [2, 5]} pnq.actions. join ( self , right , on , select ) pnq.actions. request ( self , func , unpack=True , timeout=None , retry=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u95a2\u6570\u306b\u9001\u51fa\u3059\u308b\u3088\u3046\u306b\u8981\u6c42\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30ad\u30e3\u30c3\u30c1\u3055\u308c\u3001\u5b9f\u884c\u7d50\u679c\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u8981\u7d20\u304ctuple\u307e\u305f\u306fdict\u306e\u5834\u5408\u3001\u8981\u7d20\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a2\u30f3\u30d1\u30c3\u30af\u3055\u308c\u307e\u3059\u3002 \u95a2\u6570\u306b\u975e\u540c\u671f\u95a2\u6570\u3082\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30af\u30a8\u30ea\u306e\u975e\u540c\u671f\u5b9f\u884c\u306b\u3064\u3044\u3066\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 unpack_kw: \u5024\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b Returns: \u5b9f\u884c\u7d50\u679c\u3092\u542b\u3080\u30bf\u30d7\u30eb Usage: >>> def do_something(id, val): >>> if val: >>> return 1 >>> else: >>> raise ValueError(val) >>> >>> for elm, err, result, *_ in pnq.query([{\"id\": 1, \"val\": True}, {\"id\": 1, \"val\": False}]).request(do_something): >>> if not err: >>> print(elm, err, result) True, None, 1 >>> else: >>> print(elm, err, result) False, ValueError(\"False\"), None Filtering pnq.actions. filter ( self , predicate ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).filter(lambda x: x == 1).to_list() [1] >>> pnq.query({1: True, 2: False, 3: True}).filter(lambda x: x[1] == True).to_list() [(1, True), (3, True)] pnq.actions. unique ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u91cd\u8907\u3059\u308b\u8981\u7d20\u3092\u9664\u53bb\u3059\u308b\u3002 \u30bb\u30ec\u30af\u30bf\u306b\u3088\u3063\u3066\u9078\u629e\u3055\u308c\u305f\u5024\u306b\u5bfe\u3057\u3066\u91cd\u8907\u304c\u691c\u8a3c\u3055\u308c\u3001\u305d\u306e\u5024\u3092\u8fd4\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u91cd\u8907\u3092\u691c\u8a3c\u3059\u308b\u5024\uff08\u8907\u6570\u306e\u5024\u3092\u691c\u8a3c\u3059\u308b\u5834\u5408\u306f\u30bf\u30d7\u30eb\uff09 Returns: \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 1]).filter_unique().to_list() [1, 2] >>> pnq.query([(0 , 0 , 0), (0 , 1 , 1), (0 , 0 , 2)]).unique(lambda x: (x[0], x[1])).to_list() [(0, 0), (0, 1)] Validating pnq.actions. must ( self , predicate ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5373\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2]).must(lambda x: x == 1).to_list() raise ValueError(\"2\") >>> pnq.query({1: True, 2: False, 3: True}).must(lambda x: x[1] == True).to_list() raise ValueError(\"(2, False)\") pnq.actions. must_unique ( self , selector= at 0x7f052793c9d0> , immediate=True ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u5024\u3092\u9078\u629e\u3057\u3001\u9078\u629e\u3057\u305f\u5024\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u691c\u8a3c\u3059\u308b\u5024\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 immediate: \u5373\u6642\u306b\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2, 1]).must_unique().to_list() raise DuplicateError(\"1\") Sorting pnq.actions. reverse ( self ) pnq.actions. order ( self , selector , desc=False ) pnq.actions. order_by ( self , *fields , desc=False , attr=False ) pnq.actions. shuffle ( self ) Partitoning pnq.actions. take ( self , count ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6307\u5b9a\u3057\u305f\u8981\u7d20\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 count: \u53d6\u5f97\u3059\u308b\u8981\u7d20\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take(2).to_list() [1, 2] pnq.actions. take_while ( self , predicate ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u9593\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u8981\u7d20\u304b\u3089\u6761\u4ef6\u3092\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take_while(lambda v: v < 3 ).to_list() [1, 2] pnq.actions. skip ( self , count ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u8981\u7d20\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u3001\u6b8b\u308a\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u30d0\u30a4\u30d1\u30b9\u3059\u308b\u8981\u7d20\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take_while(lambda v: v < 3 ).to_list() [1, 2] pnq.actions. skip_while ( self , predicate ) pnq.actions. from_to ( self , start , stop ) pnq.actions. page ( self , page , size ) Aggregating pnq.actions. all ( self ) pnq.actions. any ( self ) pnq.actions. min ( self ) pnq.actions. max ( self ) pnq.actions. sum ( self ) pnq.actions. average ( self ) Expanding pnq.actions. union ( self , *iterables ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u307f\u91cd\u8907\u306f\u8a31\u53ef\u3057\u306a\u3044 pnq.actions. union_all ( self ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u3080 pnq.actions. union_intersect ( self ) \u5171\u901a\u90e8\u5206\u306e\u307f\u62bd\u51fa pnq.actions. union_minus ( self ) 1\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3059\u308b\u304c\u30012\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u30c7\u30fc\u30bf\u3092\u62bd\u51fa except\u3068\u540c\u3058\u610f\u5473 pnq.actions. zip ( self , *iterables ) Converting Dispatching pnq.actions. dispatch ( self , func= at 0x7f0527931670> , unpack=True ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3001\u8981\u7d20\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3066\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3055\u308c\u307e\u305b\u3093\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 unpack_kw: \u5024\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b Returns: None Usage: >>> pnq.query([1,2]).dispatch(print) 1 2 >>> @pnq.query([{\"v1\": 1, \"v2\": 2}]).dispatch >>> def print_values(v1, v2): >>> print(v1, v2) >>> 1, 2","title":"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9"},{"location":"api/#developer-interface","text":"","title":"Developer Interface"},{"location":"api/#generating","text":"pnq.actions. iter ( self ) \u30a4\u30c6\u30e9\u30d6\u30eb\u307e\u305f\u306f\u30de\u30c3\u30d4\u30f3\u30b0\u304b\u3089\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u30de\u30c3\u30d4\u30f3\u30b0\u306e\u5834\u5408\u306f\u3001\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Parameters: self: \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u30a4\u30c6\u30e9\u30d6\u30eb\u307e\u305f\u306f\u30de\u30c3\u30d4\u30f3\u30b0 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.iter([1, 2]).to_list() [1, 2] >>> pnq.iter([{\"id\": 1, \"name\": \"bob\"}]).to_list() [(\"id\", 1), (\"name\", \"bob\")] pnq.actions. infinite ( func , *args , **kwargs ) \u6e21\u3057\u305f\u95a2\u6570\u3092\u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parameters: func(args, kwargs): \u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u95a2\u6570 args: \u95a2\u6570\u306b\u6e21\u3059\u4f4d\u7f6e\u5f15\u6570 kwargs: \u95a2\u6570\u306b\u6e21\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.infinite(datetime.now).take(1).to_list() [datetime.datetime(2021, 9, 10, 3, 57, 54, 402467)] >>> pnq.infinite(datetime, 2020, 1, day=2).take(1).to_list() [datetime.datetime(2010, 1, 2, 0, 0)] pnq.actions. repeat ( value ) \u540c\u3058\u5024\u3092\u7e70\u308a\u8fd4\u3059\u7121\u9650\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: value: \u7e70\u308a\u8fd4\u3059\u5024 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.repeat(5).take(3).to_list() [5, 5, 5] pnq.actions. value ( *args , **kwargs ) \uff11\u3064\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: value: \u8fd4\u3059\u5024 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.value(1).to_list() [1] >>> pnq.value(name=\"test\").to_list() [{\"naem\": \"test\"}] pnq.actions. count ( start=0 , step=1 ) \u9023\u7d9a\u3057\u305f\u5024\u3092\u7121\u9650\u306b\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parameters: start: \u958b\u59cb\u5024 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.count().take(3).to_list() [0, 1, 2] >>> pnq.count(1, 2).take(3).to_list() [1, 3, 5] pnq.actions. cycle ( iterable , repeat=None ) \u30a4\u30c6\u30e9\u30d6\u30eb\u304c\u8fd4\u3059\u5024\u3092\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: iterable: \u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30e9\u30d6\u30eb repeat: \u7e70\u308a\u8fd4\u3059\u56de\u6570\u3002None\u306e\u5834\u5408\u306f\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.cycle([1,2,3]).take(4).to_list() [1, 2, 3, 1] >>> pnq.cycle([1,2,3], repeat=2).to_list() [1, 2, 3, 1, 2, 3] pnq.actions. range ( *args , **kwargs ) \u6307\u5b9a\u3057\u305f\u958b\u59cb\u6570\u3068\u7d42\u4e86\u6570\u307e\u3067\u306e\u9023\u7d9a\u3057\u305f\u5024\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters: stop: \u7d42\u4e86\u6570 Parameters: start: \u958b\u59cb\u6570 stop: \u7d42\u4e86\u6570 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.range(5).to(list) [0, 1, 2, 3, 4] >>> pnq.range(0, 3, 2).to(list) [0, 2, 4]","title":"Generating"},{"location":"api/#mapping","text":"pnq.actions. map ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 str\u95a2\u6570\u3092\u6e21\u3057\u305f\u5834\u5408\u3001\u5229\u4fbf\u6027\u306e\u305f\u3081 None \u306f \"\" \u3092\u8fd4\u3057\u307e\u3059\uff08Python\u306e\u6a19\u6e96\u52d5\u4f5c\u306f \"None\" \u3092\u8fd4\u3057\u307e\u3059\uff09\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(x): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u542b\u3080\u30af\u30a8\u30ea Usage: >>> pnq.query([1]).map(lambda x: x * 2).to_list() [2] >>> pnq.query([None]).map(str).to_list() [\"\"] pnq.actions. unpack ( self , selector ) unpack_pos\u304bunpack_kw\u306e\u5225\u540d\u306b\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002 pnq.actions. unpack_pos ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector( args): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).unpack_pos(lambda arg1, arg2: arg1)).to_list() [1] >>> pnq.query([(1, 2, 3, 4, 5)]).unpack_pos(lambda arg1, arg2, args: args).to_list() [(3, 4, 5)] pnq.actions. unpack_kw ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(kwargs): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([{\"id\": 1, \"name\": \"bob\"}]).unpack_kw(lambda id, name: name)).to_list() [\"bob\"] >>> pnq.query([{\"id\": 1, \"name\": \"bob\", \"age\": 20}]).unpack_kw(lambda id, name, **kwargs: kwargs)).to_list() [{\"age\": 20}] pnq.actions. select ( self , item , *items ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3068\u3057\u3066\u5c04\u5f71\u3057\u307e\u3059\u3002 select_item \u306e\u5225\u540d\u3067\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 item: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 items: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select(0).to_list() [1] >>> pnq.query([{\"id\": 1, \"name\": \"a\"}]).select(\"id\", \"name\").to_list() [(1, \"a\")] >>> id, name = pnq.query([{\"id\": 1, \"name\": \"a\"}]).select(\"id\", \"name\") pnq.actions. select_as_dict ( self , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027\u3092\u9078\u629e\u3057\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 fields: \u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u542b\u3080\u8f9e\u66f8\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_as_dict(0).to_list() [{0: 1}] >>> pnq.query([{\"id\": 1, \"name\": \"a\", \"age\": 20}]).select_as_dict(\"id\", \"name\").to_list() [{\"id\": 1, \"name\": \"a\"}] pnq.actions. select_as_tuple ( self , *fields , attr=False ) pnq.actions. select_item ( self , item , *items ) select \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 pnq.actions. select_attr ( self , attr , *attrs ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u5c5e\u6027\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u5c5e\u6027\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3068\u3057\u3066\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 attr: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u5c5e\u6027 attrs: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u5c5e\u6027 Returns: \u9078\u629e\u3057\u305f\u5c5e\u6027\u307e\u305f\u306f\u8907\u6570\u306e\u5c5e\u6027\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> obj = Person(id=1, name=\"bob\") >>> pnq.query([obj]).select_attr(\"name\").to_list() [\"bob\"] >>> pnq.query([obj]).select_attr(\"id\", \"name\").to_list() [(1, \"bob\")] pnq.actions. select_items ( self , *items ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 select_item \u3068\u7570\u306a\u308a\u3001\u5e38\u306b\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 items: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 Returns: \u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_items(0).to_list() [(1,)] >>> pnq.query([{\"id\": 1, \"name\": \"a\"}]).select_items(\"id\", \"name\").to_list() [(1, \"a\")] pnq.actions. select_attrs ( self , *attrs ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u8907\u6570\u306e\u5c5e\u6027\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 select_attr \u3068\u7570\u306a\u308a\u3001\u5e38\u306b\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 attrs: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u5c5e\u6027 Returns: \u8907\u6570\u306e\u5c5e\u6027\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> obj = Person(id=1, name=\"bob\") >>> pnq.query([obj]).select_attrs(\"name\").to_list() [(\"bob\",)] >>> pnq.query([obj]).select_attrs(\"id\", \"name\").to_list() [(1, \"bob\")] pnq.actions. cast ( self , type ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u578b\u6ce8\u91c8\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u30a8\u30c7\u30a3\u30bf\u306e\u578b\u89e3\u91c8\u3092\u52a9\u3051\u308b\u305f\u3081\u3060\u3051\u306b\u5b58\u5728\u3057\u3001\u4f55\u3082\u51e6\u7406\u3092\u884c\u3044\u307e\u305b\u3093\u3002 \u5b9f\u969b\u306b\u578b\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f\u3001 map \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 type: \u65b0\u3057\u3044\u578b\u6ce8\u91c8 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query([1]).cast(float) pnq.actions. enumerate ( self , start=0 , step=1 ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 start: \u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 step: \u5897\u5206 Returns: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).enumrate().to_list() [(0, 1), (1, 2)] >>> pnq.query([1, 2]).enumrate(5).to_list() [(5, 1), (6, 2)] >>> pnq.query([1, 2]).enumrate(0, 10)).to_list() [(0, 1), (10, 2)] pnq.actions. group_by ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3067\u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u53d6\u5f97\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u5404\u8981\u7d20\u304c\u3059\u3067\u306b\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002 Parameters: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 Returns: \u30ad\u30fc\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> data = [ >>> {\"name\": \"banana\", \"color\": \"yellow\", \"count\": 3}, >>> {\"name\": \"apple\", \"color\": \"red\", \"count\": 2}, >>> {\"name\": \"strawberry\", \"color\": \"red\", \"count\": 5}, >>> ] >>> pnq.query(data).group_by(lambda x: x[\"color\"], x[\"name\"]).to_list() [(\"yellow\": [\"banana\"]), (\"red\": [\"apple\", \"strawberry\"])] >>> pnq.query(data).select(\"color\", \"count\").group_by().to_dict() {\"yellow\": [3], \"red\": [2, 5]} pnq.actions. join ( self , right , on , select ) pnq.actions. request ( self , func , unpack=True , timeout=None , retry=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u95a2\u6570\u306b\u9001\u51fa\u3059\u308b\u3088\u3046\u306b\u8981\u6c42\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30ad\u30e3\u30c3\u30c1\u3055\u308c\u3001\u5b9f\u884c\u7d50\u679c\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u8981\u7d20\u304ctuple\u307e\u305f\u306fdict\u306e\u5834\u5408\u3001\u8981\u7d20\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a2\u30f3\u30d1\u30c3\u30af\u3055\u308c\u307e\u3059\u3002 \u95a2\u6570\u306b\u975e\u540c\u671f\u95a2\u6570\u3082\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30af\u30a8\u30ea\u306e\u975e\u540c\u671f\u5b9f\u884c\u306b\u3064\u3044\u3066\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 unpack_kw: \u5024\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b Returns: \u5b9f\u884c\u7d50\u679c\u3092\u542b\u3080\u30bf\u30d7\u30eb Usage: >>> def do_something(id, val): >>> if val: >>> return 1 >>> else: >>> raise ValueError(val) >>> >>> for elm, err, result, *_ in pnq.query([{\"id\": 1, \"val\": True}, {\"id\": 1, \"val\": False}]).request(do_something): >>> if not err: >>> print(elm, err, result) True, None, 1 >>> else: >>> print(elm, err, result) False, ValueError(\"False\"), None","title":"Mapping"},{"location":"api/#filtering","text":"pnq.actions. filter ( self , predicate ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).filter(lambda x: x == 1).to_list() [1] >>> pnq.query({1: True, 2: False, 3: True}).filter(lambda x: x[1] == True).to_list() [(1, True), (3, True)] pnq.actions. unique ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u91cd\u8907\u3059\u308b\u8981\u7d20\u3092\u9664\u53bb\u3059\u308b\u3002 \u30bb\u30ec\u30af\u30bf\u306b\u3088\u3063\u3066\u9078\u629e\u3055\u308c\u305f\u5024\u306b\u5bfe\u3057\u3066\u91cd\u8907\u304c\u691c\u8a3c\u3055\u308c\u3001\u305d\u306e\u5024\u3092\u8fd4\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u91cd\u8907\u3092\u691c\u8a3c\u3059\u308b\u5024\uff08\u8907\u6570\u306e\u5024\u3092\u691c\u8a3c\u3059\u308b\u5834\u5408\u306f\u30bf\u30d7\u30eb\uff09 Returns: \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 1]).filter_unique().to_list() [1, 2] >>> pnq.query([(0 , 0 , 0), (0 , 1 , 1), (0 , 0 , 2)]).unique(lambda x: (x[0], x[1])).to_list() [(0, 0), (0, 1)]","title":"Filtering"},{"location":"api/#validating","text":"pnq.actions. must ( self , predicate ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5373\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2]).must(lambda x: x == 1).to_list() raise ValueError(\"2\") >>> pnq.query({1: True, 2: False, 3: True}).must(lambda x: x[1] == True).to_list() raise ValueError(\"(2, False)\") pnq.actions. must_unique ( self , selector= at 0x7f052793c9d0> , immediate=True ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u5024\u3092\u9078\u629e\u3057\u3001\u9078\u629e\u3057\u305f\u5024\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u691c\u8a3c\u3059\u308b\u5024\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 immediate: \u5373\u6642\u306b\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2, 1]).must_unique().to_list() raise DuplicateError(\"1\")","title":"Validating"},{"location":"api/#sorting","text":"pnq.actions. reverse ( self ) pnq.actions. order ( self , selector , desc=False ) pnq.actions. order_by ( self , *fields , desc=False , attr=False ) pnq.actions. shuffle ( self )","title":"Sorting"},{"location":"api/#partitoning","text":"pnq.actions. take ( self , count ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6307\u5b9a\u3057\u305f\u8981\u7d20\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 count: \u53d6\u5f97\u3059\u308b\u8981\u7d20\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take(2).to_list() [1, 2] pnq.actions. take_while ( self , predicate ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u9593\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u8981\u7d20\u304b\u3089\u6761\u4ef6\u3092\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take_while(lambda v: v < 3 ).to_list() [1, 2] pnq.actions. skip ( self , count ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u8981\u7d20\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u3001\u6b8b\u308a\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Parameters: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u30d0\u30a4\u30d1\u30b9\u3059\u308b\u8981\u7d20\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take_while(lambda v: v < 3 ).to_list() [1, 2] pnq.actions. skip_while ( self , predicate ) pnq.actions. from_to ( self , start , stop ) pnq.actions. page ( self , page , size )","title":"Partitoning"},{"location":"api/#aggregating","text":"pnq.actions. all ( self ) pnq.actions. any ( self ) pnq.actions. min ( self ) pnq.actions. max ( self ) pnq.actions. sum ( self ) pnq.actions. average ( self )","title":"Aggregating"},{"location":"api/#expanding","text":"pnq.actions. union ( self , *iterables ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u307f\u91cd\u8907\u306f\u8a31\u53ef\u3057\u306a\u3044 pnq.actions. union_all ( self ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u3080 pnq.actions. union_intersect ( self ) \u5171\u901a\u90e8\u5206\u306e\u307f\u62bd\u51fa pnq.actions. union_minus ( self ) 1\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3059\u308b\u304c\u30012\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u30c7\u30fc\u30bf\u3092\u62bd\u51fa except\u3068\u540c\u3058\u610f\u5473 pnq.actions. zip ( self , *iterables )","title":"Expanding"},{"location":"api/#converting","text":"","title":"Converting"},{"location":"api/#dispatching","text":"pnq.actions. dispatch ( self , func= at 0x7f0527931670> , unpack=True ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3001\u8981\u7d20\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3066\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3055\u308c\u307e\u305b\u3093\u3002 Parameters: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 unpack_kw: \u5024\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b Returns: None Usage: >>> pnq.query([1,2]).dispatch(print) 1 2 >>> @pnq.query([{\"v1\": 1, \"v2\": 2}]).dispatch >>> def print_values(v1, v2): >>> print(v1, v2) >>> 1, 2","title":"Dispatching"},{"location":"quick_start/","text":"","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8"},{"location":"research/","text":"\u8abf\u67fb Linq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001type hint\u3068\u89aa\u548c\u6027\u304c\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u67fb\u3057\u305f\u3002 \u7d50\u8ad6\u3068\u3057\u3066\u3001type hint\u3092\u6700\u5927\u306b\u6d3b\u7528\u3057\u305flinq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u306a\u3044\u3088\u3046\u3060\u3002 pyfunctional https://github.com/EntilZha/PyFunctional star: 1.9k \u6a5f\u80fd\u306f\u591a\u3044\u3002 \u578b\u60c5\u5831\u306f\u4f1d\u642c\u3057\u306a\u3044\u3002 rx python\u306ereactive extension\u306e\u5b9f\u88c5\u3002 Linq\u3068\u306f\u5c11\u3005\u7570\u306a\u308b\u3002 pyLINQ star: 2 type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044 pinq type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044 linqish \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3082\u3046\u6b7b\u3093\u3067\u3044\u308b PYNQ \u540d\u524d\u304cLINQ\u3063\u307d\u3044\u304cPython\u3067FPGA\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002","title":"\u8abf\u67fb"},{"location":"research/#_1","text":"Linq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001type hint\u3068\u89aa\u548c\u6027\u304c\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u67fb\u3057\u305f\u3002 \u7d50\u8ad6\u3068\u3057\u3066\u3001type hint\u3092\u6700\u5927\u306b\u6d3b\u7528\u3057\u305flinq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u306a\u3044\u3088\u3046\u3060\u3002","title":"\u8abf\u67fb"},{"location":"research/#pyfunctional","text":"https://github.com/EntilZha/PyFunctional star: 1.9k \u6a5f\u80fd\u306f\u591a\u3044\u3002 \u578b\u60c5\u5831\u306f\u4f1d\u642c\u3057\u306a\u3044\u3002","title":"pyfunctional"},{"location":"research/#rx","text":"python\u306ereactive extension\u306e\u5b9f\u88c5\u3002 Linq\u3068\u306f\u5c11\u3005\u7570\u306a\u308b\u3002","title":"rx"},{"location":"research/#pylinq-star-2","text":"type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044","title":"pyLINQ star: 2"},{"location":"research/#pinq","text":"type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044","title":"pinq"},{"location":"research/#linqish","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3082\u3046\u6b7b\u3093\u3067\u3044\u308b","title":"linqish"},{"location":"research/#pynq","text":"\u540d\u524d\u304cLINQ\u3063\u307d\u3044\u304cPython\u3067FPGA\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002","title":"PYNQ"}]}