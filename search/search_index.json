{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PNQ PNQ is a Python implementation like Language Integrated Query (LINQ). Danger PNQ\u306f\u30d9\u30fc\u30bf\u7248\u3067\u3059\u3002 \u73fe\u5728\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068API\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5341\u5206\u306a\u54c1\u8cea\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u3001\u983b\u7e41\u306b\u5185\u90e8\u5b9f\u88c5\u3084API\u304c\u66f4\u65b0\u3055\u308c\u308b\u6050\u308c\u304c\u3042\u308a\u307e\u3059\u3002 \u672c\u756a\u74b0\u5883\u3067\u306f\u5229\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 Features \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306b\u95a2\u3059\u308b\u591a\u5f69\u306a\u64cd\u4f5c \u30a2\u30af\u30bb\u30b7\u30d6\u30eb\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 \u578b\u30d2\u30f3\u30c8\u306e\u6d3b\u7528 \u975e\u540c\u671f\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5bfe\u5fdc Similar tools PyFunctional linqit aioitertools asyncstdlib Documentation See documentation for more details. Dependencies Python 3.7+ Installation Install with pip: $ pip install pnq Getting Started import pnq for x in pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) print ( x ) # => 2, 4, 6 pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) . save () # => [2, 4, 6] pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . one () # => 2 import asyncio import pnq async def aiter (): yield 1 yield 2 yield 3 async def main (): async for x in pnq . query ( aiter ()) . map ( lambda x : x * 2 ): print ( x ) # => 2, 4, 6 await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) # => [2, 4, 6] await pnq . query ( aiter ()) . filter ( lambda x : x == 3 ) . _ . one () # => 3 asyncio . run ( main ())","title":"\u306f\u3058\u3081\u306b"},{"location":"#pnq","text":"PNQ is a Python implementation like Language Integrated Query (LINQ). Danger PNQ\u306f\u30d9\u30fc\u30bf\u7248\u3067\u3059\u3002 \u73fe\u5728\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068API\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5341\u5206\u306a\u54c1\u8cea\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u3001\u983b\u7e41\u306b\u5185\u90e8\u5b9f\u88c5\u3084API\u304c\u66f4\u65b0\u3055\u308c\u308b\u6050\u308c\u304c\u3042\u308a\u307e\u3059\u3002 \u672c\u756a\u74b0\u5883\u3067\u306f\u5229\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002","title":"PNQ"},{"location":"#features","text":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306b\u95a2\u3059\u308b\u591a\u5f69\u306a\u64cd\u4f5c \u30a2\u30af\u30bb\u30b7\u30d6\u30eb\u306a\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 \u578b\u30d2\u30f3\u30c8\u306e\u6d3b\u7528 \u975e\u540c\u671f\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5bfe\u5fdc","title":"Features"},{"location":"#similar-tools","text":"PyFunctional linqit aioitertools asyncstdlib","title":"Similar tools"},{"location":"#documentation","text":"See documentation for more details.","title":"Documentation"},{"location":"#dependencies","text":"Python 3.7+","title":"Dependencies"},{"location":"#installation","text":"Install with pip: $ pip install pnq","title":"Installation"},{"location":"#getting-started","text":"import pnq for x in pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) print ( x ) # => 2, 4, 6 pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) . save () # => [2, 4, 6] pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . one () # => 2 import asyncio import pnq async def aiter (): yield 1 yield 2 yield 3 async def main (): async for x in pnq . query ( aiter ()) . map ( lambda x : x * 2 ): print ( x ) # => 2, 4, 6 await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) # => [2, 4, 6] await pnq . query ( aiter ()) . filter ( lambda x : x == 3 ) . _ . one () # => 3 asyncio . run ( main ())","title":"Getting Started"},{"location":"advanced_usage/","text":"\u975e\u540c\u671f\u51e6\u7406 \u5b9f\u884c \u6b21\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u306f\u975e\u540c\u671f\u306e\u6587\u8108\u3067\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408 request_async \u3067\u30af\u30a8\u30ea\u3092\u30c1\u30a7\u30a4\u30f3\u3057\u305f\u5834\u5408 each_async \u3092\u547c\u3073\u51fa\u3059\u5834\u5408 import asyncio import pnq async def async_iterate (): yield 1 yield 2 yield 3 async def sleep ( x ): await asyncio . sleep ( 1 ) print ( x ) async def main (): async for x in pnq . query ( async_iterate ()): print ( x ) async for x in pnq . query ([ dict ( x = 1 ), dict ( x = 2 ), dict ( x = 3 )]) . request_async ( sleep ): print ( x ) await pnq . query ([ 1 , 2 , 3 ]) . each_async ( sleep ) asyncio . run ( main ()) \u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406 pnq \u306f\u7c21\u5358\u306a\u30ad\u30e3\u30f3\u30bb\u30eb\u6a5f\u69cb\u3092\u63d0\u4f9b\u3057\u3001\u3053\u308c\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002 pnq.run \u306b\u3001\u975e\u540c\u671f\u95a2\u6570\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u95a2\u6570\u3092\u8d77\u52d5\u3057\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u30c8\u30fc\u30af\u30f3\u3092\u6e21\u3057\u307e\u3059\u3002 \u7b2c\u4e00\u5f15\u6570\u3092\u53d7\u3051\u5165\u308c\u53ef\u80fd\u306a\u5834\u5408\u3001\u305d\u306e\u95a2\u6570\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u610f\u601d\u304c\u3042\u308b\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u306f\u300110\u79d2\u9593\u5f85\u6a5f\u3057\u3066\u3044\u308b\u9593\u30ad\u30e3\u30f3\u30bb\u30eb\uff08SIGTERM\u3068SIGINT\uff09\u3092\u53d7\u3051\u5165\u308c\u307e\u305b\u3093\u3002 import asyncio import pnq async def main ( token ): await asyncio . sleep ( 10 ) print ( \"Hello, world!\" ) pnq . run ( main ) \u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u691c\u77e5\u3059\u308b\u3068 token.is_running \u306f False \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 token.is_running \u3092\u76e3\u8996\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3092\u4e2d\u65ad\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001 token.is_running \u304c False \u3068\u8a55\u4fa1\u3055\u308c\u308b\u307e\u3067\u3001\u8981\u7d20\u3092\u6d41\u3057\u7d9a\u3051\u307e\u3059\u3002 import asyncio import pnq async def main ( token ): async def infinity ( token ): while token . is_running : yield 1 await asyncio . sleep ( 1 ) async for x in pnq . query ( infinity ( token )): print ( x ) pnq . run ( main ) \u95a2\u6570\u304c\u7b2c\u4e00\u5f15\u6570\u3092\u53d7\u3051\u5165\u308c\u53ef\u80fd\u3067\u306a\u3044\u5834\u5408\u3001\u305d\u306e\u95a2\u6570\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u610f\u601d\u304c\u306a\u3044\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u691c\u77e5\u3059\u308b\u3068\u5b9f\u884c\u306f\u5373\u6642\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u307e\u3059\u3002 import asyncio import pnq async def main (): async def infinity (): while True : yield 1 await asyncio . sleep ( 1 ) async for x in pnq . query ( infinity ()): print ( x ) pnq . run ( main ) \u4f8b\u5916\u51e6\u7406 pnq \u306f\u57fa\u672c\u7684\u306b\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u307e\u305b\u3093\u304c\u3001\u6b21\u306e\u30af\u30a8\u30ea\u306e\u307f\u95a2\u6570\u5b9f\u884c\u6642\u306e\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u307e\u3059\u3002 request request_async \u3053\u308c\u3089\u306e\u30af\u30a8\u30ea\u306f\u3001\u5b9f\u884c\u7d50\u679c\u3092\u542b\u3093\u3060\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Response \u3092\u8fd4\u3057\u3001 Response \u306e err \u304c None \u3067\u306a\u3044\u5834\u5408\u3001\u51e6\u7406\u306f\u5931\u6557\u3057\u305f\u3068\u307f\u306a\u305b\u307e\u3059\u3002 \u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001\u7d50\u679c\u306f result \u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 \u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 import traceback async def raise_error ( x ): raise Exception ( str ( x )) for res in pnq . query ([{ \"x\" : 1 }] . request_async ( raise_error )): if res . err : msg = \"\" . join ( traceback . format_exception ( etype = type ( err ), value = err , tb = err . __traceback__ ) ) print ( msg ) else : print ( res . result ) \u5b9f\u88c5\u4f8b \u975e\u540c\u671f\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u542b\u3080\u30af\u30a8\u30ea\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002 import asyncio import pnq import httpx async def main (): async with httpx . AsyncClient () as client : params = pnq . query ([ { \"url\" : \"test_url_1\" }, { \"url\" : \"test_url_2\" }, ]) @params . request_async async def fetch_from_url ( url ): res = await client . get ( url ) res . raise_for_status () return res @fetch_from_url . group_by def split_success_and_error ( res ): return ( not res . err , res ) return await split_success_and_error . lazy ( dict ) result = asyncio . run ( main ()) # { # True: [res1, res2, ...], # False: [res3, res4, ...], # }","title":"\u9ad8\u5ea6\u306a\u4f7f\u7528\u65b9\u6cd5"},{"location":"advanced_usage/#_1","text":"","title":"\u975e\u540c\u671f\u51e6\u7406"},{"location":"advanced_usage/#_2","text":"\u6b21\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u306f\u975e\u540c\u671f\u306e\u6587\u8108\u3067\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408 request_async \u3067\u30af\u30a8\u30ea\u3092\u30c1\u30a7\u30a4\u30f3\u3057\u305f\u5834\u5408 each_async \u3092\u547c\u3073\u51fa\u3059\u5834\u5408 import asyncio import pnq async def async_iterate (): yield 1 yield 2 yield 3 async def sleep ( x ): await asyncio . sleep ( 1 ) print ( x ) async def main (): async for x in pnq . query ( async_iterate ()): print ( x ) async for x in pnq . query ([ dict ( x = 1 ), dict ( x = 2 ), dict ( x = 3 )]) . request_async ( sleep ): print ( x ) await pnq . query ([ 1 , 2 , 3 ]) . each_async ( sleep ) asyncio . run ( main ())","title":"\u5b9f\u884c"},{"location":"advanced_usage/#_3","text":"pnq \u306f\u7c21\u5358\u306a\u30ad\u30e3\u30f3\u30bb\u30eb\u6a5f\u69cb\u3092\u63d0\u4f9b\u3057\u3001\u3053\u308c\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002 pnq.run \u306b\u3001\u975e\u540c\u671f\u95a2\u6570\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u95a2\u6570\u3092\u8d77\u52d5\u3057\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u30c8\u30fc\u30af\u30f3\u3092\u6e21\u3057\u307e\u3059\u3002 \u7b2c\u4e00\u5f15\u6570\u3092\u53d7\u3051\u5165\u308c\u53ef\u80fd\u306a\u5834\u5408\u3001\u305d\u306e\u95a2\u6570\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u610f\u601d\u304c\u3042\u308b\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u306f\u300110\u79d2\u9593\u5f85\u6a5f\u3057\u3066\u3044\u308b\u9593\u30ad\u30e3\u30f3\u30bb\u30eb\uff08SIGTERM\u3068SIGINT\uff09\u3092\u53d7\u3051\u5165\u308c\u307e\u305b\u3093\u3002 import asyncio import pnq async def main ( token ): await asyncio . sleep ( 10 ) print ( \"Hello, world!\" ) pnq . run ( main ) \u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u691c\u77e5\u3059\u308b\u3068 token.is_running \u306f False \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 token.is_running \u3092\u76e3\u8996\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3092\u4e2d\u65ad\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001 token.is_running \u304c False \u3068\u8a55\u4fa1\u3055\u308c\u308b\u307e\u3067\u3001\u8981\u7d20\u3092\u6d41\u3057\u7d9a\u3051\u307e\u3059\u3002 import asyncio import pnq async def main ( token ): async def infinity ( token ): while token . is_running : yield 1 await asyncio . sleep ( 1 ) async for x in pnq . query ( infinity ( token )): print ( x ) pnq . run ( main ) \u95a2\u6570\u304c\u7b2c\u4e00\u5f15\u6570\u3092\u53d7\u3051\u5165\u308c\u53ef\u80fd\u3067\u306a\u3044\u5834\u5408\u3001\u305d\u306e\u95a2\u6570\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u610f\u601d\u304c\u306a\u3044\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u691c\u77e5\u3059\u308b\u3068\u5b9f\u884c\u306f\u5373\u6642\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u307e\u3059\u3002 import asyncio import pnq async def main (): async def infinity (): while True : yield 1 await asyncio . sleep ( 1 ) async for x in pnq . query ( infinity ()): print ( x ) pnq . run ( main )","title":"\u30ad\u30e3\u30f3\u30bb\u30eb\u7ba1\u7406"},{"location":"advanced_usage/#_4","text":"pnq \u306f\u57fa\u672c\u7684\u306b\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u307e\u305b\u3093\u304c\u3001\u6b21\u306e\u30af\u30a8\u30ea\u306e\u307f\u95a2\u6570\u5b9f\u884c\u6642\u306e\u4f8b\u5916\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u307e\u3059\u3002 request request_async \u3053\u308c\u3089\u306e\u30af\u30a8\u30ea\u306f\u3001\u5b9f\u884c\u7d50\u679c\u3092\u542b\u3093\u3060\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Response \u3092\u8fd4\u3057\u3001 Response \u306e err \u304c None \u3067\u306a\u3044\u5834\u5408\u3001\u51e6\u7406\u306f\u5931\u6557\u3057\u305f\u3068\u307f\u306a\u305b\u307e\u3059\u3002 \u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001\u7d50\u679c\u306f result \u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 \u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 import traceback async def raise_error ( x ): raise Exception ( str ( x )) for res in pnq . query ([{ \"x\" : 1 }] . request_async ( raise_error )): if res . err : msg = \"\" . join ( traceback . format_exception ( etype = type ( err ), value = err , tb = err . __traceback__ ) ) print ( msg ) else : print ( res . result )","title":"\u4f8b\u5916\u51e6\u7406"},{"location":"advanced_usage/#_5","text":"\u975e\u540c\u671f\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u542b\u3080\u30af\u30a8\u30ea\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002 import asyncio import pnq import httpx async def main (): async with httpx . AsyncClient () as client : params = pnq . query ([ { \"url\" : \"test_url_1\" }, { \"url\" : \"test_url_2\" }, ]) @params . request_async async def fetch_from_url ( url ): res = await client . get ( url ) res . raise_for_status () return res @fetch_from_url . group_by def split_success_and_error ( res ): return ( not res . err , res ) return await split_success_and_error . lazy ( dict ) result = asyncio . run ( main ()) # { # True: [res1, res2, ...], # False: [res3, res4, ...], # }","title":"\u5b9f\u88c5\u4f8b"},{"location":"api/","text":"Transforming pnq.actions. map ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 str\u95a2\u6570\u3092\u6e21\u3057\u305f\u5834\u5408\u3001\u5229\u4fbf\u6027\u306e\u305f\u3081 None \u306f \"\" \u3092\u8fd4\u3057\u307e\u3059\uff08Python\u306e\u6a19\u6e96\u52d5\u4f5c\u306f \"None\" \u3092\u8fd4\u3057\u307e\u3059\uff09\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(x): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u542b\u3080\u30af\u30a8\u30ea Usage: >>> pnq.query([1]).map(lambda x: x * 2).to(list) [2] >>> pnq.query([None]).map(str).to(list) [\"\"] pnq.actions. unpack_pos ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).unpack_pos(lambda arg1, arg2: arg1)).to(list) [1] >>> pnq.query([(1, 2, 3, 4, 5)]).unpack_pos(lambda arg1, arg2, *args: args).to(list) [(3, 4, 5)] pnq.actions. unpack_kw ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(kwargs): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([{\"id\": 1, \"name\": \"bob\"}]).unpack_kw(lambda id, name: name)).to(list) [\"bob\"] >>> pnq.query([{\"id\": 1, \"name\": \"bob\", \"age\": 20}]).unpack_kw(lambda id, name, **kwargs: kwargs)).to(list) [{\"age\": 20}] pnq.actions. select ( self , field , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3068\u3057\u3066\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 field: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 fields: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u8ffd\u52a0\u306e\u30a2\u30a4\u30c6\u30e0 attr: \u8981\u7d20\u306e\u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select(0).to(list) [1] >>> pnq.query([{\"id\": 1, \"name\": \"a\"}]).select(\"id\", \"name\").to(list) [(1, \"a\")] >>> pnq.query([user]).select(\"id\", \"name\", attr=True).to(list) [(1, \"a\")] pnq.actions. select_as_tuple ( self , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027\u3092\u9078\u629e\u3057\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 select\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u9078\u629e\u3057\u305f\u5024\u304c\uff11\u3064\u3067\u3082\u5fc5\u305a\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 fields: \u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u542b\u3080\u8f9e\u66f8\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_as_tuple(0).to(list) [(1,)] >>> pnq.query([user]).select_as_tuple(\"id\", \"name\", attr=True).to(list) [(\"1\", \"a\")] pnq.actions. select_as_dict ( self , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027\u3092\u9078\u629e\u3057\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 fields: \u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u542b\u3080\u8f9e\u66f8\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_as_dict(0).to(list) [{0: 1}] >>> pnq.query([user]).select_as_dict(\"id\", \"name\", attr=True).to(list) [{\"id\": 1, \"name\": \"b\"}] pnq.actions. reflect ( self , mapping , * , default=typing.NoReturn , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e0e\u3048\u305f\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u57fa\u3065\u304d\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 mapping: \u5143\u306e\u8981\u7d20\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u5c04\u5f71\u5148\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5bfe\u5fdc\u8868 default: \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> person = {\"id\":1, \"name\": \"\u5c71\u7530\", \"kana\": \"\u3084\u307e\u3060\", \"note\": \"hoge\"} >>> pnq.query([person]).reflect({ >>> \"id\": \"id\", >>> \"name\": {\"name\", \"searchable\"}, >>> \"kana\": {\"kana\", \"searchable\"}, >>> \"note\": \"searchable\" >>> }).to(list) >>> [{\"id\": 1, \"name\": \"\u5c71\u7530\", \"kana\": \"\u3084\u307e\u3060\", \"searchable\": [\"\u5c71\u7530\", \"\u3084\u307e\u3060\", \"hoge\"]}] pnq.actions. flat ( self , selector=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30a4\u30c6\u30e9\u30d6\u30eb\u306b\u5c04\u5f71\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\uff11\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5e73\u5766\u5316\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u5404\u8981\u7d20\u304b\u3089\u5e73\u5766\u5316\u3059\u308b\u8981\u7d20\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query([\"abc\", \"def\"]).flat().to(list) >>> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] >>> countries = [{\"country\": \"japan\", \"state\": [\"tokyo\", \"osaka\"]}, {\"country\": \"america\", \"state\": [\"new york\", \"florida\"]}] >>> pnq.query(countries).flat(lambda x: x[\"state\"]).to(list) >>> [\"tokyo\", \"osaka\", \"new york\", \"florida\"] pnq.actions. flat_recursive ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u518d\u5e30\u7684\u306b\u8907\u6570\u30ce\u30fc\u30c9\u3092\u9078\u629e\u3057\u3001\u9078\u629e\u3055\u308c\u305f\u30ce\u30fc\u30c9\u3092\uff11\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5e73\u5766\u5316\u3057\u307e\u3059\u3002 \u5404\u30eb\u30fc\u30c8\u8981\u7d20\u304b\u3089\u6d45\u3044\u9806\u306b\u5217\u6319\u3055\u308c\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u5404\u8981\u7d20\u304b\u3089\u5e73\u5766\u5316\u3059\u308b\u8981\u7d20\u3092\u518d\u5e30\u7684\u306b\u9078\u629e\u3059\u308b\u95a2\u6570\uff08\u623b\u308a\u5024\u306f\u30ea\u30b9\u30c8\u7b49\u306b\u542b\u3081\u3066\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query( >>> {\"name\": \"a\", \"nodes\": [{\"name\": \"b\", nodes: [{\"name\": c, \"nodes\": []}, {\"name\": \"d\", \"nodes\": []}}}]}]} >>> ).flat_recursive(lambdax x: x[\"nodes\"]).select(\"name\").to(list) >>> [\"a\", \"b\", \"c\", \"d\"] pnq.actions. pivot_unstack ( self , default=None ) \u884c\u65b9\u5411\u306b\u4e26\u3093\u3067\u3044\u308b\u30c7\u30fc\u30bf\u3092\u5217\u65b9\u5411\u306b\u5165\u308c\u66ff\u3048\u308b Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 default: \u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: data = [ {\"name\": \"test1\", \"age\": 20}, {\"name\": \"test2\", \"age\": 25}, {\"name\": \"test3\", \"age\": 30, \"sex\": \"male\"}, ] {'name': ['test1', 'test2', 'test3'], 'age': [20, 25, 30], 'sex': [None, None, 'male']} pnq.actions. pivot_stack ( self ) \u5217\u65b9\u5411\u306b\u4e26\u3093\u3067\u3044\u308b\u30c7\u30fc\u30bf\u3092\u884c\u65b9\u5411\u306b\u5165\u308c\u66ff\u3048\u308b Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: {'name': ['test1', 'test2', 'test3'], 'age': [20, 25, 30], 'sex': [None, None, 'male']} data = [ {\"name\": \"test1\", \"age\": 20, \"sex\": None}, {\"name\": \"test2\", \"age\": 25, \"sex\": None}, {\"name\": \"test3\", \"age\": 30, \"sex\": \"male\"}, ] pnq.actions. cast ( self , type ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u578b\u6ce8\u91c8\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u30a8\u30c7\u30a3\u30bf\u306e\u578b\u89e3\u91c8\u3092\u52a9\u3051\u308b\u305f\u3081\u3060\u3051\u306b\u5b58\u5728\u3057\u3001\u4f55\u3082\u51e6\u7406\u3092\u884c\u3044\u307e\u305b\u3093\u3002 \u5b9f\u969b\u306b\u578b\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f\u3001 map \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 type: \u65b0\u3057\u3044\u578b\u6ce8\u91c8 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query([1]).cast(float) pnq.actions. enumerate ( self , start=0 , step=1 ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 start: \u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 step: \u5897\u5206 Returns: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).enumerate().to(list) [(0, 1), (1, 2)] >>> pnq.query([1, 2]).enumerate(5).to(list) [(5, 1), (6, 2)] >>> pnq.query([1, 2]).enumerate(0, 10)).to(list) [(0, 1), (10, 2)] pnq.actions. request ( self , func , retry=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3059\u308b\u3088\u3046\u306b\u8981\u6c42\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30ad\u30e3\u30c3\u30c1\u3055\u308c\u3001\u5b9f\u884c\u7d50\u679c\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b\u305f\u3081\u3001\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Args: self: \u8f9e\u66f8\u3092\u8981\u7d20\u3068\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: \u5b9f\u884c\u7d50\u679c Usage: >>> def do_something(id, val): >>> if val: >>> return 1 >>> else: >>> raise ValueError(val) >>> >>> for res in pnq.query([{\"id\": 1, \"val\": True}, {\"id\": 2, \"val\": False}]).request(do_something): >>> if res.err: >>> print(f\"ERROR: {res.to(dict)}\") >>> else: >>> print(f\"SUCCESS: {res.to(dict)}\") pnq.actions. request_async ( self , func , timeout=None , retry=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u975e\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3059\u308b\u3088\u3046\u306b\u8981\u6c42\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30ad\u30e3\u30c3\u30c1\u3055\u308c\u3001\u5b9f\u884c\u7d50\u679c\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b\u305f\u3081\u3001\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Args: self: \u8f9e\u66f8\u3092\u8981\u7d20\u3068\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: \u5b9f\u884c\u7d50\u679c Usage: >>> async def do_something(id, val): >>> if val: >>> return 1 >>> else: >>> raise ValueError(val) >>> >>> params = pnq.query([{\"id\": 1, \"val\": True}, {\"id\": 2, \"val\": False}]) >>> async for res in params.request_async(do_something): >>> if res.err: >>> print(f\"ERROR: {res.to(dict)}\") >>> else: >>> print(f\"SUCCESS: {res.to(dict)}\") pnq.actions. group_by ( self , selector= at 0x7ff4abbe5820> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3067\u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u53d6\u5f97\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u5404\u8981\u7d20\u304c\u3059\u3067\u306b\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 Returns: \u30ad\u30fc\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> data = [ >>> {\"name\": \"banana\", \"color\": \"yellow\", \"count\": 3}, >>> {\"name\": \"apple\", \"color\": \"red\", \"count\": 2}, >>> {\"name\": \"strawberry\", \"color\": \"red\", \"count\": 5}, >>> ] >>> pnq.query(data).group_by(lambda x: x[\"color\"], x[\"name\"]).to(list) [(\"yellow\", [\"banana\"]), (\"red\", [\"apple\", \"strawberry\"])] >>> pnq.query(data).select(\"color\", \"count\").group_by().to(dict) {\"yellow\": [3], \"red\": [2, 5]} pnq.actions. chunked ( self , size ) \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u6bce\u306b\u5206\u5272\u3059\u308b\u3002 pnq.actions. join ( self , right , on , select ) Filtering pnq.actions. filter ( self , predicate ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).filter(lambda x: x == 1).to(list) [1] >>> pnq.query({1: True, 2: False, 3: True}).filter(lambda x: x[1] == True).to(list) [(1, True), (3, True)] pnq.actions. filter_type ( self , *types ) \u6307\u5b9a\u3057\u305f\u578b\u306b\u4e00\u81f4\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 \u578b\u306f\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 isinstance \u306e\u6319\u52d5\u306b\u6e96\u3058\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 types: \u30d5\u30a3\u30eb\u30bf\u3059\u308b\u578b Returns: \u6307\u5b9a\u3057\u305f\u578b\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, False, \"a\"]).filter_type(int).to(list) [1, False] >>> pnq.query([1, False, \"a\"]).filter_type(str, bool).to(list) [False, \"a\"] pnq.actions. filter_keys ( self , *keys ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u8981\u7d20\u306e\u307f\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001 list dict set \u306a\u3069\u3092\u30af\u30a8\u30ea\u5316\u3057\u305f\u76f4\u5f8c\u306e\u307f\u5229\u7528\u3067\u304d\u307e\u3059\u3002 list \u3001 tuple \u306e\u5834\u5408\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30d5\u30a3\u30eb\u30bf\u3055\u308c\u3001\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 dict \u306e\u5834\u5408\u30ad\u30fc\u3067\u30d5\u30a3\u30eb\u30bf\u3055\u308c\u3001\u30ad\u30fc\u3068\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 set \u306e\u5834\u5408\u306f\u3001\u30ad\u30fc\u3067\u30d5\u30a3\u30eb\u30bf\u3055\u308c\u3001\u30ad\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 keys: \u30d5\u30a3\u30eb\u30bf\u3059\u308b\u30ad\u30fc Returns: \u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u8981\u7d20\u306e\u307f\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).filter_keys(1).to(list) [2] >>> pnq.query({\"a\": 1, \"b\": 2}).filter_keys(\"b\").to(list) [(\"b\", 2)] >>> pnq.query({\"a\", \"b\"}).filter_keys(\"b\").to(list) [\"b\"] pnq.actions. filter_unique ( self , selector=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u91cd\u8907\u3059\u308b\u8981\u7d20\u3092\u9664\u53bb\u3059\u308b\u3002 \u30bb\u30ec\u30af\u30bf\u306b\u3088\u3063\u3066\u9078\u629e\u3055\u308c\u305f\u5024\u306b\u5bfe\u3057\u3066\u91cd\u8907\u304c\u691c\u8a3c\u3055\u308c\u3001\u305d\u306e\u5024\u3092\u8fd4\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u91cd\u8907\u3092\u691c\u8a3c\u3059\u308b\u5024\uff08\u8907\u6570\u306e\u5024\u3092\u691c\u8a3c\u3059\u308b\u5834\u5408\u306f\u30bf\u30d7\u30eb\uff09 Returns: \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 1]).filter_unique().to(list) [1, 2] >>> pnq.query([(0 , 0 , 0), (0 , 1 , 1), (0 , 0 , 2)]).unique(lambda x: (x[0], x[1])).to(list) [(0, 0), (0, 1)] Validating pnq.actions. must ( self , predicate , msg='' ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5373\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2]).must(lambda x: x == 1).to(list) raise ValueError(\"2\") >>> pnq.query({1: True, 2: False, 3: True}).must(lambda x: x[1] == True).to(list) raise ValueError(\"(2, False)\") pnq.actions. must_type ( self , types ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304c\u6307\u5b9a\u3057\u305f\u578b\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5373\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u578b\u306f\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 isinstance \u306e\u6319\u52d5\u306b\u6e96\u3058\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 types: \u30d5\u30a3\u30eb\u30bf\u3059\u308b\u578b Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2]).must_type(str, int).to(list) raise ValueError(\"1 is not str\") pnq.actions. must_keys ( self , *keys ) filter_keys \u3092\u5b9f\u884c\u3057\u3001\u5168\u3066\u306e\u30ad\u30fc\u3092\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 \u691c\u8a3c\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u4fdd\u7559\u3055\u308c\u307e\u3059\u3002 pnq.actions. must_unique ( self , selector=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u5024\u3092\u9078\u629e\u3057\u3001\u9078\u629e\u3057\u305f\u5024\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u691c\u8a3c\u3059\u308b\u5024\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 immediate: \u5373\u6642\u306b\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2, 1]).must_unique().to(list) raise DuplicateError(\"1\") Partitioning pnq.actions. take ( self , count_or_range ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6307\u5b9a\u3057\u305f\u7bc4\u56f2\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u53d6\u5f97\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 count_or_range: \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u53d6\u5f97\u3059\u308b\u8981\u7d20\u6570\u307e\u305f\u306f\u53d6\u5f97\u3059\u308b\u7bc4\u56f2 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take(2).to(list) [1, 2] >>> pnq.query([1, 2, 3]).take(range(1, 2)).to(list) [2] pnq.actions. take_while ( self , predicate ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6761\u4ef6\u306e\u691c\u8a3c\u306b\u5931\u6557\u3059\u308b\u307e\u3067\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u8981\u7d20\u306f\u7834\u68c4\u3055\u308c\u308b\u305f\u3081\u3001\u5024\u3092\u6d88\u8cbb\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u30bd\u30fc\u30b9\u306e\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).enumerate().take_while(lambda v: v[0] < 2).select(1).to(list) [1, 2] pnq.actions. skip ( self , count_or_range ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6307\u5b9a\u3057\u305f\u7bc4\u56f2\u306e\u8981\u7d20\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 count_or_range: \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u30d0\u30a4\u30d1\u30b9\u3059\u308b\u8981\u7d20\u6570\u307e\u305f\u306f\u30d0\u30a4\u30d1\u30b9\u3059\u308b\u7bc4\u56f2 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).skip(1).to(list) [2, 3] >>> pnq.query([1, 2, 3]).skip(range(1, 2)).to(list) [1, 3] pnq.actions. skip_while ( self , predicate ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6761\u4ef6\u306e\u691c\u8a3c\u306b\u5931\u6557\u3059\u308b\u307e\u3067\u306e\u8981\u7d20\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u3001\u6b8b\u308a\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).enumerate().skip_while(lambda v: v[0] < 1).select(1).to(list) [2, 3] pnq.actions. take_page ( self , page , size ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6307\u5b9a\u3057\u305f\u7bc4\u56f2\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u7bc4\u56f2\u306f\u30da\u30fc\u30b8\u30b5\u30a4\u30ba\u3068\u53d6\u5f97\u5bfe\u8c61\u306e\u30da\u30fc\u30b8\u304b\u3089\u6c42\u3081\u3089\u308c\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 page: \u53d6\u5f97\u5bfe\u8c61\u306e\u30da\u30fc\u30b8\uff081\u59cb\u307e\u308a\uff09 size: \uff11\u30da\u30fc\u30b8\u3042\u305f\u308a\u306e\u8981\u7d20\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([0, 1, 2, 3, 4, 5]).take_page(page=1, size=2).to(list) [0, 1] >>> pnq.query([0, 1, 2, 3, 4, 5]).take_page(page=2, size=3).to(list) [3, 4, 5] Sorting pnq.actions. order_by ( self , selector=None , desc=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u6607\u9806\u3067\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002 Args: self: \u30bd\u30fc\u30c8\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u8981\u7d20\u304b\u3089\u30ad\u30fc\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570\u3002\u8907\u6570\u306e\u30ad\u30fc\u3092\u8a55\u4fa1\u3059\u308b\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 desc: \u964d\u9806\u3067\u4e26\u3079\u308b\u5834\u5408\u306fTrue Usage: >>> pnq.query([3, 2, 1]]).order_by().to(list) [1, 2, 3] >>> pnq.query([1, 2, 3]).order_by(lambda x: -x).to(list) [3, 2, 1] >>> pnq.query([1, 2, 3]).order_by(desc=True).to(list) [3, 2, 1] >>> pnq.query([(1, 2)), (2, 2), (2, 1)]).order_by(lambda x: (x[0], x[1])).to(list) [(1, 2)), (2, 1), (2, 2)] pnq.actions. order_by_fields ( self , *fields , desc=False , attr=False ) pnq.actions. order_by_reverse ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u9006\u9806\u306b\u3057\u307e\u3059\u3002 Args: self: \u30bd\u30fc\u30c8\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 Usage: >>> pnq.query([1, 2, 3]).order_by_reverse().to(list) [3, 2, 1] pnq.actions. order_by_shuffle ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002 Args: self: \u30bd\u30fc\u30c8\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 Usage: >>> pnq.query([1, 2, 3]).order_by_shuffle().to(list) [1, 3, 2] >>> pnq.query([1, 2, 3]).order_by_shuffle().to(list) [3, 1, 2] Expanding pnq.actions. union ( self , *iterables ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u307f\u91cd\u8907\u306f\u8a31\u53ef\u3057\u306a\u3044 pnq.actions. union_all ( self ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u3080 pnq.actions. union_intersect ( self ) \u5171\u901a\u90e8\u5206\u306e\u307f\u62bd\u51fa pnq.actions. union_minus ( self ) 1\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3059\u308b\u304c\u30012\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u30c7\u30fc\u30bf\u3092\u62bd\u51fa except\u3068\u540c\u3058\u610f\u5473 pnq.actions. zip ( self , *iterables ) pnq.actions. compress ( self , *iterables ) \u672a\u5b9f\u88c5 Finalizing - Executing pnq.actions. to ( self , finalizer ) \u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u306b\u3088\u3063\u3066\u51e6\u7406\u3057\u307e\u3059\u3002 Args: self: \u8a55\u4fa1\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9 finalizer: \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u30af\u30e9\u30b9\u30fb\u95a2\u6570 Returns: \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u304c\u8fd4\u3059\u7d50\u679c Usage: >>> pnq.query([1, 2, 3]).to(list) [1, 2] >>> pnq.query({1: \"a\", 2: \"b\"}).to(dict) {1: \"a\", 2: \"b\"} pnq.actions. each ( self , func= at 0x7ff4abb398b0> ) \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3001\u6d41\u308c\u3066\u304f\u308b\u8981\u7d20\u3092\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3055\u308c\u307e\u305b\u3093\u3002 \u95a2\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u5358\u306b\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: None Usage: >>> pnq.query([1,2]).each() >>> pnq.query([1,2]).each(print) 1 2 pnq.actions. each_unpack ( self , func= at 0x7ff4abb39af0> ) each \u5b9f\u884c\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u306a\u304c\u3089\u8981\u7d20\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 \u4e0e\u3048\u308b\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f each \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 Usage: >>> @pnq.query([{\"arg1\": 1, \"arg2\": 2}]).each_unpack >>> def print_values(arg1, arg2): >>> print(arg1, arg2) >>> 1, 2 pnq.actions. each_async ( self , func= ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u975e\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3055\u308c\u307e\u305b\u3093\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: None Usage: >>> results = [] >>> async def append(x): >>> results.append(x) >>> await pnq.query([1,2]).each_async(append) >>> print(results) [1, 2] pnq.actions. each_async_unpack ( self , func= ) each_async \u5b9f\u884c\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u306a\u304c\u3089\u8981\u7d20\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 \u4e0e\u3048\u308b\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f each_async \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 Usage: >>> results = [] >>> async def append(arg1, arg2): >>> results.append((arg1, arg2)) >>> await pnq.query([{\"arg1\": 1, \"arg2\": 2}]).each_async_unpack(append) >>> print(results) [(1, 2)] pnq.actions. lazy ( self , finalizer ) \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u306e\u5b9f\u884c\u3059\u308b\u30ec\u30a4\u30b8\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30ec\u30a4\u30b8\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3068\u540c\u671f\u5b9f\u884c\u3055\u308c\u3001 await \u3059\u308b\u3068\u975e\u540c\u671f\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 finalizer: \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u30af\u30e9\u30b9\u30fb\u95a2\u6570 Returns: \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u304c\u8fd4\u3059\u7d50\u679c Usage: >>> lazy = pnq.query([1, 2, 3]).lazy(list) >>> lazy() [1, 2, 3] >>> await lazy [1, 2, 3] >>> lazy = pnq.query([1, 2, 3]).lazy(pnq.actions.first) >>> await lazy 1 Finalizing - Aggregating pnq.actions. len ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 Usage: >>> pnq.query([1, 2, 3]).len() 3 pnq.actions. exists ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u8981\u7d20\u306e\u6709\u7121\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 Usage: >>> pnq.query([]).exists() False >>> pnq.query([1]).exists() True pnq.actions. all ( self , selector= at 0x7ff4abb35ee0> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5168\u3066\u306e\u8981\u7d20\u304cTrue\u3068\u5224\u5b9a\u3067\u304d\u308b\u304b\u8a55\u4fa1\u3057\u307e\u3059\u3002\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306fTrue\u3092\u8fd4\u3057\u307e\u3059\u3002 selector: \u8981\u7d20\u304b\u3089\u691c\u8a3c\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> pnq.query([]).all() True >>> pnq.query([0]).all() False >>> pnq.query([1]).all() True >>> pnq.query([1, 0]).all() False >>> pnq.query([1, 2]).all() True pnq.actions. any ( self , selector= at 0x7ff4abb39040> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u3044\u305a\u308c\u304b\u306e\u8981\u7d20\u304cTrue\u3068\u5224\u5b9a\u3067\u304d\u308b\u304b\u8a55\u4fa1\u3057\u307e\u3059\u3002\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306fFalse\u3092\u8fd4\u3057\u307e\u3059\u3002 selector: \u8981\u7d20\u304b\u3089\u691c\u8a3c\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> pnq.query([]).any() False >>> pnq.query([0]).any() False >>> pnq.query([1]).any() True >>> pnq.query([1, 0]).any() True pnq.actions. contains ( self , value , selector= at 0x7ff4abb35e50> ) \u65e2\u5b9a\u306e\u7b49\u5024\u6bd4\u8f03\u5b50\u3092\u4f7f\u7528\u3057\u3066\u3001\u6307\u5b9a\u3057\u305f\u8981\u7d20\u304c\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u8a55\u4fa1\u3057\u307e\u3059\u3002 \u8f9e\u66f8\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408\u306f\u3001\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002 value: \u691c\u7d22\u5bfe\u8c61\u306e\u5024 selector: \u8981\u7d20\u304b\u3089\u691c\u7d22\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> fruits = pnq.query([\"apple\", \"orange\"]) >>> fruits.contains(\"banana\") False >>> fruits.contains(\"apple\") True >>> fruits.contains(\"orange\") True >>> pnq.query({\"a\": 1, \"b\": 2}).contains(\"a\") False >>> pnq.query({\"a\": 1, \"b\": 2}).contains((\"a\", 1)) True pnq.actions. min ( self , selector= at 0x7ff4abb39280> , default=typing.NoReturn ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u6700\u5c0f\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([1, 2]).min() 1 >>> pnq.query([]).min() ValueError: min() arg is an empty sequence >>> pnq.query([]).min(default=0) 0 pnq.actions. max ( self , selector= at 0x7ff4abb393a0> , default=typing.NoReturn ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u6700\u5927\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([1, 2]).max() 2 >>> pnq.query([]).max() ValueError: max() arg is an empty sequence >>> pnq.query([]).max(default=0) 0 pnq.actions. sum ( self , selector= at 0x7ff4abb394c0> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u5408\u8a08\u3057\u307e\u3059\u3002 selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> pnq.query([]).sum() 0 >>> pnq.query([1, 2]).sum() 3 pnq.actions. average ( self , selector= at 0x7ff4abb391f0> , exp=1e-05 , round='ROUND_HALF_UP' ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u306e\u5e73\u5747\u3092\u6c42\u3081\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 exp: \u4e38\u3081\u308b\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570 round: \u4e38\u3081\u65b9\u5f0f Usage: >>> pnq.query([]).average() 0 >>> pnq.query([1, 2]).average() 1.5 pnq.actions. reduce ( self , seed , op='+=' , selector= ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u6307\u5b9a\u3057\u305f\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u30b7\u30fc\u30c9\u306b\u5408\u6210\u3057\u3001\u5408\u6210\u7d50\u679c\u3092\u8fd4\u3059\u3002 Args: seed: \u5408\u6210\u5bfe\u8c61\u3068\u3059\u308b\u521d\u671f\u5024(\u5de6\u8fba) op: \u4ee3\u5165\u6f14\u7b97\u5b50\u307e\u305f\u306f\uff12\u9805\u6f14\u7b97\u95a2\u6570 selector: \u8981\u7d20\u304b\u3089\u7d50\u5408\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570\uff08\u53f3\u8fba\uff09 Usage: >>> pnq.query([1]).reduce(10, \"+=\") 11 >>> pnq.query([[1, 2, 3], [4, 5, 6]]).reduce([], \"+=\") [1, 2, 3, 4, 5, 6] >>> pnq.query([{\"a\": 1}, {\"b\": 2}]).reduce({}, \"|=\") # python3.9~ {\"a\": 1, \"b\": 2} >>> pnq.query([1, 2, 3, 4, 5]).reduce(0, \"+=\", lambda x: x * 10) 150 >>> pnq.query([1, 2, 3, 4, 5]).reduce(0, lambda l, r: l + r, lambda x: x * 10) 150 pnq.actions. concat ( self , selector= at 0x7ff4abb39700> , delimiter='' ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u9023\u7d50\u3057\u307e\u3059\u3002 None\u306f\u7a7a\u6587\u5b57\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u7d50\u5408\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 delimiter: \u533a\u5207\u308a\u6587\u5b57 Usage: >>> pnq.query([]).concat() \"\" >>> pnq.query([1, 2]).concat() \"12\" >>> pnq.query([\"a\", \"b\"]).concat() \"ab\" >>> pnq.query([\"a\", None]).concat() \"a\" >>> pnq.query([\"a\", \"b\"]).concat(delimiter=\",\") \"a,b\" Finalizing - Getting pnq.actions. get ( self , key , default=typing.NoReturn ) \u30ea\u30b9\u30c8\u3084\u8f9e\u66f8\u306a\u3069\u306e getitem \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30bb\u30c3\u30c8\u3067\u3082\u4f7f\u7528\u3067\u304d\u3001\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u305d\u306e\u307e\u307e\u30ad\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5b9f\u4f53\u5316\u3057\u3066\u3044\u308b\u72b6\u614b\u3067\u306e\u307f\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30af\u30a8\u30ea\u5316\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002 Args: key: \u30ad\u30fc default: \u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u30c7\u30d5\u30a9\u30eb\u30c8\u5024 Usage: >>> data = pnq.query({\"a\", \"b\", \"c\"}) >>> data.get(\"a\") \"a\" >>> data.get(\"d\") raise KeyError(\"d\") >>> data.get(\"d\", 10) 10 pnq.actions. one ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u8981\u7d20\u304c\uff11\u3064\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3057\u3001\u305d\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 one \u95a2\u6570\u306f\u3001\uff11\u3064\u306e\u8981\u7d20\u3067\u3042\u308b\u304b\u691c\u8a3c\u3059\u308b\u305f\u3081\u306b\uff12\u3064\u76ee\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u305d\u3046\u3068\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u3068\u306a\u308b\u30a4\u30c6\u30e9\u30d6\u30eb\u304c\u5024\u3092\u6d88\u8cbb\u3059\u308b\u5b9f\u88c5\u3060\u3068\u3001\uff12\u3064\u306e\u8981\u7d20\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([]).one() raise NoElementError(\"...\") >>> pnq.query([1]).one() 1 >>> pnq.query([1, 2]).one() raise NotOneElementError(\"...\") >>> pnq.query([]).one(None) None >>> pnq.query([1, 2]).one(None) raise NotOneElementError(\"...\") pnq.actions. first ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30bb\u30c3\u30c8\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408\u3001\u30bb\u30c3\u30c8\u306f\u9806\u5e8f\u3092\u4fdd\u6301\u3057\u306a\u3044\u305f\u3081\u3001\u9806\u5e8f\u6027\u306f\u671f\u5f85\u3067\u304d\u307e\u305b\u3093\u3002 Args: default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([]).first() raise NoElementError(\"...\") >>> pnq.query([1]).first() 1 >>> pnq.query([1, 2]).first() 1 >>> pnq.query([]).first(None) None pnq.actions. last ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6700\u5f8c\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30bb\u30c3\u30c8\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408\u3001\u30bb\u30c3\u30c8\u306f\u9806\u5e8f\u3092\u4fdd\u6301\u3057\u306a\u3044\u305f\u3081\u3001\u9806\u5e8f\u6027\u306f\u671f\u5f85\u3067\u304d\u307e\u305b\u3093\u3002 Args: default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([]).last() raise NoElementError(\"...\") >>> pnq.query([1]).last() 1 >>> pnq.query([1, 2]).last() 2 >>> pnq.query([]).last(None) None pnq.actions. get_or ( self , key , default ) pnq.actions. one_or ( self , default ) pnq.actions. first_or ( self , default ) pnq.actions. last_or ( self , default ) pnq.actions. get_or_raise ( self , key , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f get \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 KeyError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 Args: exc: KeyError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).get_or_raise(0, Exception(f\"Not Exist Key: 0\")) raise Exception(\"Not Exist Key: 0\") pnq.actions. one_or_raise ( self , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f one \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 NoElementError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 NotOneElementError\u306f\u30ad\u30e3\u30c3\u30c1\u3057\u307e\u305b\u3093\u3002 Args: exc: NoElementError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).one_or_raise(0, Exception(\"No exists.\")) raise Exception(\"No exists.\") pnq.actions. first_or_raise ( self , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f first \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 NoElementError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 Args: exc: NoElementError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).first_or_raise(0, Exception(\"No exists.\")) raise Exception(\"No exists.\") pnq.actions. last_or_raise ( self , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f last \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 NoElementError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 Args: exc: NoElementError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).last_or_raise(0, Exception(\"No exists.\")) raise Exception(\"No exists.\") Generating pnq.actions. infinite ( func , *args , **kwargs ) \u6e21\u3057\u305f\u95a2\u6570\u3092\u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: func(args, kwargs): \u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u95a2\u6570 args: \u95a2\u6570\u306b\u6e21\u3059\u4f4d\u7f6e\u5f15\u6570 kwargs: \u95a2\u6570\u306b\u6e21\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.infinite(datetime.now).take(1).to(list) [datetime.datetime(2021, 9, 10, 3, 57, 54, 402467)] >>> pnq.infinite(datetime, 2020, 1, day=2).take(1).to(list) [datetime.datetime(2010, 1, 2, 0, 0)] pnq.actions. repeat ( value ) \u540c\u3058\u5024\u3092\u7e70\u308a\u8fd4\u3059\u7121\u9650\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Args: value: \u7e70\u308a\u8fd4\u3059\u5024 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.repeat(5).take(3).to(list) [5, 5, 5] pnq.actions. value ( *args , **kwargs ) \uff11\u3064\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u4f4d\u7f6e\u5f15\u6570\u3092\u4e0e\u3048\u305f\u5834\u5408\u306f\u4e0e\u3048\u305f\u5024\u304b\u30bf\u30d7\u30eb\u306b\u306a\u308a\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3092\u4e0e\u3048\u305f\u5834\u5408\u306f\u8f9e\u66f8\u306b\u306a\u308a\u307e\u3059\u3002 Usage: >>> pnq.value(1).to(list) [1] >>> pnq.value(\"a\", \"b\").to(list) [(\"a\", \"b\")] >>> pnq.value(name=\"test\").to(list) [{\"naem\": \"test\"}] pnq.actions. count ( start=0 , step=1 ) \u9023\u7d9a\u3057\u305f\u5024\u3092\u7121\u9650\u306b\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: start: \u958b\u59cb\u5024 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.count().take(3).to(list) [0, 1, 2] >>> pnq.count(1, 2).take(3).to(list) [1, 3, 5] pnq.actions. cycle ( iterable , repeat=None ) \u30a4\u30c6\u30e9\u30d6\u30eb\u304c\u8fd4\u3059\u5024\u3092\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Args: iterable: \u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30e9\u30d6\u30eb repeat: \u7e70\u308a\u8fd4\u3059\u56de\u6570\u3002None\u306e\u5834\u5408\u306f\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.cycle([1,2,3]).take(4).to(list) [1, 2, 3, 1] >>> pnq.cycle([1,2,3], repeat=2).to(list) [1, 2, 3, 1, 2, 3] pnq.actions. range ( *args , **kwargs ) \u6307\u5b9a\u3057\u305f\u958b\u59cb\u6570\u3068\u7d42\u4e86\u6570\u307e\u3067\u306e\u9023\u7d9a\u3057\u305f\u5024\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Args: stop: \u7d42\u4e86\u6570 Args: start: \u958b\u59cb\u6570 stop: \u7d42\u4e86\u6570 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.range(5).to(list) [0, 1, 2, 3, 4] >>> pnq.range(0, 3, 2).to(list) [0, 2, 4]","title":"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9"},{"location":"api/#transforming","text":"pnq.actions. map ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 str\u95a2\u6570\u3092\u6e21\u3057\u305f\u5834\u5408\u3001\u5229\u4fbf\u6027\u306e\u305f\u3081 None \u306f \"\" \u3092\u8fd4\u3057\u307e\u3059\uff08Python\u306e\u6a19\u6e96\u52d5\u4f5c\u306f \"None\" \u3092\u8fd4\u3057\u307e\u3059\uff09\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(x): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u542b\u3080\u30af\u30a8\u30ea Usage: >>> pnq.query([1]).map(lambda x: x * 2).to(list) [2] >>> pnq.query([None]).map(str).to(list) [\"\"] pnq.actions. unpack_pos ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).unpack_pos(lambda arg1, arg2: arg1)).to(list) [1] >>> pnq.query([(1, 2, 3, 4, 5)]).unpack_pos(lambda arg1, arg2, *args: args).to(list) [(3, 4, 5)] pnq.actions. unpack_kw ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3001\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector(kwargs): \u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u5909\u63db\u95a2\u6570 Returns: \u5909\u63db\u95a2\u6570\u3067\u5f97\u3089\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([{\"id\": 1, \"name\": \"bob\"}]).unpack_kw(lambda id, name: name)).to(list) [\"bob\"] >>> pnq.query([{\"id\": 1, \"name\": \"bob\", \"age\": 20}]).unpack_kw(lambda id, name, **kwargs: kwargs)).to(list) [{\"age\": 20}] pnq.actions. select ( self , field , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3068\u3057\u3066\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 field: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0 fields: \u5404\u8981\u7d20\u304b\u3089\u9078\u629e\u3059\u308b\u8ffd\u52a0\u306e\u30a2\u30a4\u30c6\u30e0 attr: \u8981\u7d20\u306e\u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select(0).to(list) [1] >>> pnq.query([{\"id\": 1, \"name\": \"a\"}]).select(\"id\", \"name\").to(list) [(1, \"a\")] >>> pnq.query([user]).select(\"id\", \"name\", attr=True).to(list) [(1, \"a\")] pnq.actions. select_as_tuple ( self , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027\u3092\u9078\u629e\u3057\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 select\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u9078\u629e\u3057\u305f\u5024\u304c\uff11\u3064\u3067\u3082\u5fc5\u305a\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 fields: \u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u542b\u3080\u8f9e\u66f8\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_as_tuple(0).to(list) [(1,)] >>> pnq.query([user]).select_as_tuple(\"id\", \"name\", attr=True).to(list) [(\"1\", \"a\")] pnq.actions. select_as_dict ( self , *fields , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027\u3092\u9078\u629e\u3057\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 fields: \u9078\u629e\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u307e\u305f\u306f\u5c5e\u6027 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u9078\u629e\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3092\u542b\u3080\u8f9e\u66f8\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([(1, 2)]).select_as_dict(0).to(list) [{0: 1}] >>> pnq.query([user]).select_as_dict(\"id\", \"name\", attr=True).to(list) [{\"id\": 1, \"name\": \"b\"}] pnq.actions. reflect ( self , mapping , * , default=typing.NoReturn , attr=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4e0e\u3048\u305f\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u57fa\u3065\u304d\u8f9e\u66f8\u3068\u3057\u3066\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 mapping: \u5143\u306e\u8981\u7d20\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u5c04\u5f71\u5148\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5bfe\u5fdc\u8868 default: \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024 attr: \u5c5e\u6027\u304b\u3089\u53d6\u5f97\u3059\u308b\u5834\u5408\u306fTrue\u3068\u3059\u308b Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> person = {\"id\":1, \"name\": \"\u5c71\u7530\", \"kana\": \"\u3084\u307e\u3060\", \"note\": \"hoge\"} >>> pnq.query([person]).reflect({ >>> \"id\": \"id\", >>> \"name\": {\"name\", \"searchable\"}, >>> \"kana\": {\"kana\", \"searchable\"}, >>> \"note\": \"searchable\" >>> }).to(list) >>> [{\"id\": 1, \"name\": \"\u5c71\u7530\", \"kana\": \"\u3084\u307e\u3060\", \"searchable\": [\"\u5c71\u7530\", \"\u3084\u307e\u3060\", \"hoge\"]}] pnq.actions. flat ( self , selector=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3092\u30a4\u30c6\u30e9\u30d6\u30eb\u306b\u5c04\u5f71\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\uff11\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5e73\u5766\u5316\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u5404\u8981\u7d20\u304b\u3089\u5e73\u5766\u5316\u3059\u308b\u8981\u7d20\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query([\"abc\", \"def\"]).flat().to(list) >>> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] >>> countries = [{\"country\": \"japan\", \"state\": [\"tokyo\", \"osaka\"]}, {\"country\": \"america\", \"state\": [\"new york\", \"florida\"]}] >>> pnq.query(countries).flat(lambda x: x[\"state\"]).to(list) >>> [\"tokyo\", \"osaka\", \"new york\", \"florida\"] pnq.actions. flat_recursive ( self , selector ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u518d\u5e30\u7684\u306b\u8907\u6570\u30ce\u30fc\u30c9\u3092\u9078\u629e\u3057\u3001\u9078\u629e\u3055\u308c\u305f\u30ce\u30fc\u30c9\u3092\uff11\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5e73\u5766\u5316\u3057\u307e\u3059\u3002 \u5404\u30eb\u30fc\u30c8\u8981\u7d20\u304b\u3089\u6d45\u3044\u9806\u306b\u5217\u6319\u3055\u308c\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u5404\u8981\u7d20\u304b\u3089\u5e73\u5766\u5316\u3059\u308b\u8981\u7d20\u3092\u518d\u5e30\u7684\u306b\u9078\u629e\u3059\u308b\u95a2\u6570\uff08\u623b\u308a\u5024\u306f\u30ea\u30b9\u30c8\u7b49\u306b\u542b\u3081\u3066\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query( >>> {\"name\": \"a\", \"nodes\": [{\"name\": \"b\", nodes: [{\"name\": c, \"nodes\": []}, {\"name\": \"d\", \"nodes\": []}}}]}]} >>> ).flat_recursive(lambdax x: x[\"nodes\"]).select(\"name\").to(list) >>> [\"a\", \"b\", \"c\", \"d\"] pnq.actions. pivot_unstack ( self , default=None ) \u884c\u65b9\u5411\u306b\u4e26\u3093\u3067\u3044\u308b\u30c7\u30fc\u30bf\u3092\u5217\u65b9\u5411\u306b\u5165\u308c\u66ff\u3048\u308b Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 default: \u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: data = [ {\"name\": \"test1\", \"age\": 20}, {\"name\": \"test2\", \"age\": 25}, {\"name\": \"test3\", \"age\": 30, \"sex\": \"male\"}, ] {'name': ['test1', 'test2', 'test3'], 'age': [20, 25, 30], 'sex': [None, None, 'male']} pnq.actions. pivot_stack ( self ) \u5217\u65b9\u5411\u306b\u4e26\u3093\u3067\u3044\u308b\u30c7\u30fc\u30bf\u3092\u884c\u65b9\u5411\u306b\u5165\u308c\u66ff\u3048\u308b Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: {'name': ['test1', 'test2', 'test3'], 'age': [20, 25, 30], 'sex': [None, None, 'male']} data = [ {\"name\": \"test1\", \"age\": 20, \"sex\": None}, {\"name\": \"test2\", \"age\": 25, \"sex\": None}, {\"name\": \"test3\", \"age\": 30, \"sex\": \"male\"}, ] pnq.actions. cast ( self , type ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u578b\u6ce8\u91c8\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u30a8\u30c7\u30a3\u30bf\u306e\u578b\u89e3\u91c8\u3092\u52a9\u3051\u308b\u305f\u3081\u3060\u3051\u306b\u5b58\u5728\u3057\u3001\u4f55\u3082\u51e6\u7406\u3092\u884c\u3044\u307e\u305b\u3093\u3002 \u5b9f\u969b\u306b\u578b\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f\u3001 map \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 type: \u65b0\u3057\u3044\u578b\u6ce8\u91c8 Returns: \u53c2\u7167\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059 Usage: >>> pnq.query([1]).cast(float) pnq.actions. enumerate ( self , start=0 , step=1 ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u65b0\u3057\u3044\u30d5\u30a9\u30fc\u30e0\u306b\u5c04\u5f71\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 start: \u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 step: \u5897\u5206 Returns: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).enumerate().to(list) [(0, 1), (1, 2)] >>> pnq.query([1, 2]).enumerate(5).to(list) [(5, 1), (6, 2)] >>> pnq.query([1, 2]).enumerate(0, 10)).to(list) [(0, 1), (10, 2)] pnq.actions. request ( self , func , retry=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3059\u308b\u3088\u3046\u306b\u8981\u6c42\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30ad\u30e3\u30c3\u30c1\u3055\u308c\u3001\u5b9f\u884c\u7d50\u679c\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b\u305f\u3081\u3001\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Args: self: \u8f9e\u66f8\u3092\u8981\u7d20\u3068\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: \u5b9f\u884c\u7d50\u679c Usage: >>> def do_something(id, val): >>> if val: >>> return 1 >>> else: >>> raise ValueError(val) >>> >>> for res in pnq.query([{\"id\": 1, \"val\": True}, {\"id\": 2, \"val\": False}]).request(do_something): >>> if res.err: >>> print(f\"ERROR: {res.to(dict)}\") >>> else: >>> print(f\"SUCCESS: {res.to(dict)}\") pnq.actions. request_async ( self , func , timeout=None , retry=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u975e\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3059\u308b\u3088\u3046\u306b\u8981\u6c42\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30ad\u30e3\u30c3\u30c1\u3055\u308c\u3001\u5b9f\u884c\u7d50\u679c\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3059\u308b\u305f\u3081\u3001\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Args: self: \u8f9e\u66f8\u3092\u8981\u7d20\u3068\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: \u5b9f\u884c\u7d50\u679c Usage: >>> async def do_something(id, val): >>> if val: >>> return 1 >>> else: >>> raise ValueError(val) >>> >>> params = pnq.query([{\"id\": 1, \"val\": True}, {\"id\": 2, \"val\": False}]) >>> async for res in params.request_async(do_something): >>> if res.err: >>> print(f\"ERROR: {res.to(dict)}\") >>> else: >>> print(f\"SUCCESS: {res.to(dict)}\") pnq.actions. group_by ( self , selector= at 0x7ff4abbe5820> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u8981\u7d20\u304b\u3089\u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3067\u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u53d6\u5f97\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u30bb\u30ec\u30af\u30bf\u95a2\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u5404\u8981\u7d20\u304c\u3059\u3067\u306b\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3001\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002 Args: self: \u5909\u63db\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 Returns: \u30ad\u30fc\u3068\u8981\u7d20\uff08\u30bf\u30d7\u30eb\uff09\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> data = [ >>> {\"name\": \"banana\", \"color\": \"yellow\", \"count\": 3}, >>> {\"name\": \"apple\", \"color\": \"red\", \"count\": 2}, >>> {\"name\": \"strawberry\", \"color\": \"red\", \"count\": 5}, >>> ] >>> pnq.query(data).group_by(lambda x: x[\"color\"], x[\"name\"]).to(list) [(\"yellow\", [\"banana\"]), (\"red\", [\"apple\", \"strawberry\"])] >>> pnq.query(data).select(\"color\", \"count\").group_by().to(dict) {\"yellow\": [3], \"red\": [2, 5]} pnq.actions. chunked ( self , size ) \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u6bce\u306b\u5206\u5272\u3059\u308b\u3002 pnq.actions. join ( self , right , on , select )","title":"Transforming"},{"location":"api/#filtering","text":"pnq.actions. filter ( self , predicate ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).filter(lambda x: x == 1).to(list) [1] >>> pnq.query({1: True, 2: False, 3: True}).filter(lambda x: x[1] == True).to(list) [(1, True), (3, True)] pnq.actions. filter_type ( self , *types ) \u6307\u5b9a\u3057\u305f\u578b\u306b\u4e00\u81f4\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 \u578b\u306f\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 isinstance \u306e\u6319\u52d5\u306b\u6e96\u3058\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 types: \u30d5\u30a3\u30eb\u30bf\u3059\u308b\u578b Returns: \u6307\u5b9a\u3057\u305f\u578b\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, False, \"a\"]).filter_type(int).to(list) [1, False] >>> pnq.query([1, False, \"a\"]).filter_type(str, bool).to(list) [False, \"a\"] pnq.actions. filter_keys ( self , *keys ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u8981\u7d20\u306e\u307f\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3057\u307e\u3059\u3002 \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001 list dict set \u306a\u3069\u3092\u30af\u30a8\u30ea\u5316\u3057\u305f\u76f4\u5f8c\u306e\u307f\u5229\u7528\u3067\u304d\u307e\u3059\u3002 list \u3001 tuple \u306e\u5834\u5408\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30d5\u30a3\u30eb\u30bf\u3055\u308c\u3001\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 dict \u306e\u5834\u5408\u30ad\u30fc\u3067\u30d5\u30a3\u30eb\u30bf\u3055\u308c\u3001\u30ad\u30fc\u3068\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 set \u306e\u5834\u5408\u306f\u3001\u30ad\u30fc\u3067\u30d5\u30a3\u30eb\u30bf\u3055\u308c\u3001\u30ad\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 keys: \u30d5\u30a3\u30eb\u30bf\u3059\u308b\u30ad\u30fc Returns: \u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u8981\u7d20\u306e\u307f\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2]).filter_keys(1).to(list) [2] >>> pnq.query({\"a\": 1, \"b\": 2}).filter_keys(\"b\").to(list) [(\"b\", 2)] >>> pnq.query({\"a\", \"b\"}).filter_keys(\"b\").to(list) [\"b\"] pnq.actions. filter_unique ( self , selector=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u91cd\u8907\u3059\u308b\u8981\u7d20\u3092\u9664\u53bb\u3059\u308b\u3002 \u30bb\u30ec\u30af\u30bf\u306b\u3088\u3063\u3066\u9078\u629e\u3055\u308c\u305f\u5024\u306b\u5bfe\u3057\u3066\u91cd\u8907\u304c\u691c\u8a3c\u3055\u308c\u3001\u305d\u306e\u5024\u3092\u8fd4\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u91cd\u8907\u3092\u691c\u8a3c\u3059\u308b\u5024\uff08\u8907\u6570\u306e\u5024\u3092\u691c\u8a3c\u3059\u308b\u5834\u5408\u306f\u30bf\u30d7\u30eb\uff09 Returns: \u91cd\u8907\u3092\u542b\u307e\u306a\u3044\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 1]).filter_unique().to(list) [1, 2] >>> pnq.query([(0 , 0 , 0), (0 , 1 , 1), (0 , 0 , 2)]).unique(lambda x: (x[0], x[1])).to(list) [(0, 0), (0, 1)]","title":"Filtering"},{"location":"api/#validating","text":"pnq.actions. must ( self , predicate , msg='' ) \u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5373\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2]).must(lambda x: x == 1).to(list) raise ValueError(\"2\") >>> pnq.query({1: True, 2: False, 3: True}).must(lambda x: x[1] == True).to(list) raise ValueError(\"(2, False)\") pnq.actions. must_type ( self , types ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304c\u6307\u5b9a\u3057\u305f\u578b\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5373\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u578b\u306f\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 isinstance \u306e\u6319\u52d5\u306b\u6e96\u3058\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 types: \u30d5\u30a3\u30eb\u30bf\u3059\u308b\u578b Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2]).must_type(str, int).to(list) raise ValueError(\"1 is not str\") pnq.actions. must_keys ( self , *keys ) filter_keys \u3092\u5b9f\u884c\u3057\u3001\u5168\u3066\u306e\u30ad\u30fc\u3092\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 \u691c\u8a3c\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u4fdd\u7559\u3055\u308c\u307e\u3059\u3002 pnq.actions. must_unique ( self , selector=None ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u5024\u3092\u9078\u629e\u3057\u3001\u9078\u629e\u3057\u305f\u5024\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u691c\u8a3c\u3059\u308b\u5024\u3092\u9078\u629e\u3059\u308b\u95a2\u6570 immediate: \u5373\u6642\u306b\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b Returns: \u5168\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea\uff08\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u3044\u9650\u308a\uff09 Usage: >>> pnq.query([1, 2, 1]).must_unique().to(list) raise DuplicateError(\"1\")","title":"Validating"},{"location":"api/#partitioning","text":"pnq.actions. take ( self , count_or_range ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6307\u5b9a\u3057\u305f\u7bc4\u56f2\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u53d6\u5f97\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 count_or_range: \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u53d6\u5f97\u3059\u308b\u8981\u7d20\u6570\u307e\u305f\u306f\u53d6\u5f97\u3059\u308b\u7bc4\u56f2 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).take(2).to(list) [1, 2] >>> pnq.query([1, 2, 3]).take(range(1, 2)).to(list) [2] pnq.actions. take_while ( self , predicate ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6761\u4ef6\u306e\u691c\u8a3c\u306b\u5931\u6557\u3059\u308b\u307e\u3067\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u8981\u7d20\u306f\u7834\u68c4\u3055\u308c\u308b\u305f\u3081\u3001\u5024\u3092\u6d88\u8cbb\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u30bd\u30fc\u30b9\u306e\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).enumerate().take_while(lambda v: v[0] < 2).select(1).to(list) [1, 2] pnq.actions. skip ( self , count_or_range ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6307\u5b9a\u3057\u305f\u7bc4\u56f2\u306e\u8981\u7d20\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 count_or_range: \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u30d0\u30a4\u30d1\u30b9\u3059\u308b\u8981\u7d20\u6570\u307e\u305f\u306f\u30d0\u30a4\u30d1\u30b9\u3059\u308b\u7bc4\u56f2 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).skip(1).to(list) [2, 3] >>> pnq.query([1, 2, 3]).skip(range(1, 2)).to(list) [1, 3] pnq.actions. skip_while ( self , predicate ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u304b\u3089\u3001\u6761\u4ef6\u306e\u691c\u8a3c\u306b\u5931\u6557\u3059\u308b\u307e\u3067\u306e\u8981\u7d20\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u3001\u6b8b\u308a\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 predicate: \u6761\u4ef6\u3092\u691c\u8a3c\u3059\u308b\u95a2\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([1, 2, 3]).enumerate().skip_while(lambda v: v[0] < 1).select(1).to(list) [2, 3] pnq.actions. take_page ( self , page , size ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6307\u5b9a\u3057\u305f\u7bc4\u56f2\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u7bc4\u56f2\u306f\u30da\u30fc\u30b8\u30b5\u30a4\u30ba\u3068\u53d6\u5f97\u5bfe\u8c61\u306e\u30da\u30fc\u30b8\u304b\u3089\u6c42\u3081\u3089\u308c\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 page: \u53d6\u5f97\u5bfe\u8c61\u306e\u30da\u30fc\u30b8\uff081\u59cb\u307e\u308a\uff09 size: \uff11\u30da\u30fc\u30b8\u3042\u305f\u308a\u306e\u8981\u7d20\u6570 Returns: \u53d6\u5f97\u3055\u308c\u305f\u8981\u7d20\u3092\u8fd4\u3059\u30af\u30a8\u30ea Usage: >>> pnq.query([0, 1, 2, 3, 4, 5]).take_page(page=1, size=2).to(list) [0, 1] >>> pnq.query([0, 1, 2, 3, 4, 5]).take_page(page=2, size=3).to(list) [3, 4, 5]","title":"Partitioning"},{"location":"api/#sorting","text":"pnq.actions. order_by ( self , selector=None , desc=False ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u6607\u9806\u3067\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002 Args: self: \u30bd\u30fc\u30c8\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 selector: \u8981\u7d20\u304b\u3089\u30ad\u30fc\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570\u3002\u8907\u6570\u306e\u30ad\u30fc\u3092\u8a55\u4fa1\u3059\u308b\u5834\u5408\u306f\u3001\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 desc: \u964d\u9806\u3067\u4e26\u3079\u308b\u5834\u5408\u306fTrue Usage: >>> pnq.query([3, 2, 1]]).order_by().to(list) [1, 2, 3] >>> pnq.query([1, 2, 3]).order_by(lambda x: -x).to(list) [3, 2, 1] >>> pnq.query([1, 2, 3]).order_by(desc=True).to(list) [3, 2, 1] >>> pnq.query([(1, 2)), (2, 2), (2, 1)]).order_by(lambda x: (x[0], x[1])).to(list) [(1, 2)), (2, 1), (2, 2)] pnq.actions. order_by_fields ( self , *fields , desc=False , attr=False ) pnq.actions. order_by_reverse ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u9006\u9806\u306b\u3057\u307e\u3059\u3002 Args: self: \u30bd\u30fc\u30c8\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 Usage: >>> pnq.query([1, 2, 3]).order_by_reverse().to(list) [3, 2, 1] pnq.actions. order_by_shuffle ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002 Args: self: \u30bd\u30fc\u30c8\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 Usage: >>> pnq.query([1, 2, 3]).order_by_shuffle().to(list) [1, 3, 2] >>> pnq.query([1, 2, 3]).order_by_shuffle().to(list) [3, 1, 2]","title":"Sorting"},{"location":"api/#expanding","text":"pnq.actions. union ( self , *iterables ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u307f\u91cd\u8907\u306f\u8a31\u53ef\u3057\u306a\u3044 pnq.actions. union_all ( self ) \u5168\u3066\u306e\u884c\u3092\u96c6\u5408\u306b\u542b\u3080 pnq.actions. union_intersect ( self ) \u5171\u901a\u90e8\u5206\u306e\u307f\u62bd\u51fa pnq.actions. union_minus ( self ) 1\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3059\u308b\u304c\u30012\u3064\u76ee\u306e\u554f\u3044\u5408\u308f\u305b\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u30c7\u30fc\u30bf\u3092\u62bd\u51fa except\u3068\u540c\u3058\u610f\u5473 pnq.actions. zip ( self , *iterables ) pnq.actions. compress ( self , *iterables ) \u672a\u5b9f\u88c5","title":"Expanding"},{"location":"api/#finalizing-executing","text":"pnq.actions. to ( self , finalizer ) \u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u306b\u3088\u3063\u3066\u51e6\u7406\u3057\u307e\u3059\u3002 Args: self: \u8a55\u4fa1\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9 finalizer: \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u30af\u30e9\u30b9\u30fb\u95a2\u6570 Returns: \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u304c\u8fd4\u3059\u7d50\u679c Usage: >>> pnq.query([1, 2, 3]).to(list) [1, 2] >>> pnq.query({1: \"a\", 2: \"b\"}).to(dict) {1: \"a\", 2: \"b\"} pnq.actions. each ( self , func= at 0x7ff4abb398b0> ) \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3001\u6d41\u308c\u3066\u304f\u308b\u8981\u7d20\u3092\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3055\u308c\u307e\u305b\u3093\u3002 \u95a2\u6570\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u5358\u306b\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: None Usage: >>> pnq.query([1,2]).each() >>> pnq.query([1,2]).each(print) 1 2 pnq.actions. each_unpack ( self , func= at 0x7ff4abb39af0> ) each \u5b9f\u884c\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u306a\u304c\u3089\u8981\u7d20\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 \u4e0e\u3048\u308b\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f each \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 Usage: >>> @pnq.query([{\"arg1\": 1, \"arg2\": 2}]).each_unpack >>> def print_values(arg1, arg2): >>> print(arg1, arg2) >>> 1, 2 pnq.actions. each_async ( self , func= ) \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u6d41\u308c\u3066\u304f\u308b\u5024\u3092\u975e\u540c\u671f\u95a2\u6570\u306b\u9001\u51fa\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3055\u308c\u307e\u305b\u3093\u3002 Args: self: \u30d5\u30a3\u30eb\u30bf\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 func: \u5024\u306e\u9001\u51fa\u5148\u306e\u95a2\u6570 Returns: None Usage: >>> results = [] >>> async def append(x): >>> results.append(x) >>> await pnq.query([1,2]).each_async(append) >>> print(results) [1, 2] pnq.actions. each_async_unpack ( self , func= ) each_async \u5b9f\u884c\u6642\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u306a\u304c\u3089\u8981\u7d20\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 \u4e0e\u3048\u308b\u8981\u7d20\u306f\u8f9e\u66f8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f each_async \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 Usage: >>> results = [] >>> async def append(arg1, arg2): >>> results.append((arg1, arg2)) >>> await pnq.query([{\"arg1\": 1, \"arg2\": 2}]).each_async_unpack(append) >>> print(results) [(1, 2)] pnq.actions. lazy ( self , finalizer ) \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u306e\u5b9f\u884c\u3059\u308b\u30ec\u30a4\u30b8\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30ec\u30a4\u30b8\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b3\u30fc\u30eb\u3059\u308b\u3068\u540c\u671f\u5b9f\u884c\u3055\u308c\u3001 await \u3059\u308b\u3068\u975e\u540c\u671f\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 Args: self: \u30d0\u30a4\u30d1\u30b9\u5bfe\u8c61\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 finalizer: \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u30af\u30e9\u30b9\u30fb\u95a2\u6570 Returns: \u30d5\u30a1\u30a4\u30ca\u30e9\u30a4\u30b6\u304c\u8fd4\u3059\u7d50\u679c Usage: >>> lazy = pnq.query([1, 2, 3]).lazy(list) >>> lazy() [1, 2, 3] >>> await lazy [1, 2, 3] >>> lazy = pnq.query([1, 2, 3]).lazy(pnq.actions.first) >>> await lazy 1","title":"Finalizing - Executing"},{"location":"api/#finalizing-aggregating","text":"pnq.actions. len ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 Usage: >>> pnq.query([1, 2, 3]).len() 3 pnq.actions. exists ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u8981\u7d20\u306e\u6709\u7121\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 Usage: >>> pnq.query([]).exists() False >>> pnq.query([1]).exists() True pnq.actions. all ( self , selector= at 0x7ff4abb35ee0> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5168\u3066\u306e\u8981\u7d20\u304cTrue\u3068\u5224\u5b9a\u3067\u304d\u308b\u304b\u8a55\u4fa1\u3057\u307e\u3059\u3002\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306fTrue\u3092\u8fd4\u3057\u307e\u3059\u3002 selector: \u8981\u7d20\u304b\u3089\u691c\u8a3c\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> pnq.query([]).all() True >>> pnq.query([0]).all() False >>> pnq.query([1]).all() True >>> pnq.query([1, 0]).all() False >>> pnq.query([1, 2]).all() True pnq.actions. any ( self , selector= at 0x7ff4abb39040> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u3044\u305a\u308c\u304b\u306e\u8981\u7d20\u304cTrue\u3068\u5224\u5b9a\u3067\u304d\u308b\u304b\u8a55\u4fa1\u3057\u307e\u3059\u3002\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306fFalse\u3092\u8fd4\u3057\u307e\u3059\u3002 selector: \u8981\u7d20\u304b\u3089\u691c\u8a3c\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> pnq.query([]).any() False >>> pnq.query([0]).any() False >>> pnq.query([1]).any() True >>> pnq.query([1, 0]).any() True pnq.actions. contains ( self , value , selector= at 0x7ff4abb35e50> ) \u65e2\u5b9a\u306e\u7b49\u5024\u6bd4\u8f03\u5b50\u3092\u4f7f\u7528\u3057\u3066\u3001\u6307\u5b9a\u3057\u305f\u8981\u7d20\u304c\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u8a55\u4fa1\u3057\u307e\u3059\u3002 \u8f9e\u66f8\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408\u306f\u3001\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u306e\u30bf\u30d7\u30eb\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002 value: \u691c\u7d22\u5bfe\u8c61\u306e\u5024 selector: \u8981\u7d20\u304b\u3089\u691c\u7d22\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> fruits = pnq.query([\"apple\", \"orange\"]) >>> fruits.contains(\"banana\") False >>> fruits.contains(\"apple\") True >>> fruits.contains(\"orange\") True >>> pnq.query({\"a\": 1, \"b\": 2}).contains(\"a\") False >>> pnq.query({\"a\": 1, \"b\": 2}).contains((\"a\", 1)) True pnq.actions. min ( self , selector= at 0x7ff4abb39280> , default=typing.NoReturn ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u6700\u5c0f\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([1, 2]).min() 1 >>> pnq.query([]).min() ValueError: min() arg is an empty sequence >>> pnq.query([]).min(default=0) 0 pnq.actions. max ( self , selector= at 0x7ff4abb393a0> , default=typing.NoReturn ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u304b\u3089\u6700\u5927\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([1, 2]).max() 2 >>> pnq.query([]).max() ValueError: max() arg is an empty sequence >>> pnq.query([]).max(default=0) 0 pnq.actions. sum ( self , selector= at 0x7ff4abb394c0> ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u5408\u8a08\u3057\u307e\u3059\u3002 selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 Usage: >>> pnq.query([]).sum() 0 >>> pnq.query([1, 2]).sum() 3 pnq.actions. average ( self , selector= at 0x7ff4abb391f0> , exp=1e-05 , round='ROUND_HALF_UP' ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u306e\u5e73\u5747\u3092\u6c42\u3081\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u8a08\u7b97\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 exp: \u4e38\u3081\u308b\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570 round: \u4e38\u3081\u65b9\u5f0f Usage: >>> pnq.query([]).average() 0 >>> pnq.query([1, 2]).average() 1.5 pnq.actions. reduce ( self , seed , op='+=' , selector= ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u6307\u5b9a\u3057\u305f\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u30b7\u30fc\u30c9\u306b\u5408\u6210\u3057\u3001\u5408\u6210\u7d50\u679c\u3092\u8fd4\u3059\u3002 Args: seed: \u5408\u6210\u5bfe\u8c61\u3068\u3059\u308b\u521d\u671f\u5024(\u5de6\u8fba) op: \u4ee3\u5165\u6f14\u7b97\u5b50\u307e\u305f\u306f\uff12\u9805\u6f14\u7b97\u95a2\u6570 selector: \u8981\u7d20\u304b\u3089\u7d50\u5408\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570\uff08\u53f3\u8fba\uff09 Usage: >>> pnq.query([1]).reduce(10, \"+=\") 11 >>> pnq.query([[1, 2, 3], [4, 5, 6]]).reduce([], \"+=\") [1, 2, 3, 4, 5, 6] >>> pnq.query([{\"a\": 1}, {\"b\": 2}]).reduce({}, \"|=\") # python3.9~ {\"a\": 1, \"b\": 2} >>> pnq.query([1, 2, 3, 4, 5]).reduce(0, \"+=\", lambda x: x * 10) 150 >>> pnq.query([1, 2, 3, 4, 5]).reduce(0, lambda l, r: l + r, lambda x: x * 10) 150 pnq.actions. concat ( self , selector= at 0x7ff4abb39700> , delimiter='' ) \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u9023\u7d50\u3057\u307e\u3059\u3002 None\u306f\u7a7a\u6587\u5b57\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 Args: selector: \u8981\u7d20\u304b\u3089\u7d50\u5408\u3059\u308b\u5024\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570 delimiter: \u533a\u5207\u308a\u6587\u5b57 Usage: >>> pnq.query([]).concat() \"\" >>> pnq.query([1, 2]).concat() \"12\" >>> pnq.query([\"a\", \"b\"]).concat() \"ab\" >>> pnq.query([\"a\", None]).concat() \"a\" >>> pnq.query([\"a\", \"b\"]).concat(delimiter=\",\") \"a,b\"","title":"Finalizing - Aggregating"},{"location":"api/#finalizing-getting","text":"pnq.actions. get ( self , key , default=typing.NoReturn ) \u30ea\u30b9\u30c8\u3084\u8f9e\u66f8\u306a\u3069\u306e getitem \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30bb\u30c3\u30c8\u3067\u3082\u4f7f\u7528\u3067\u304d\u3001\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u305d\u306e\u307e\u307e\u30ad\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5b9f\u4f53\u5316\u3057\u3066\u3044\u308b\u72b6\u614b\u3067\u306e\u307f\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30af\u30a8\u30ea\u5316\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002 Args: key: \u30ad\u30fc default: \u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u30c7\u30d5\u30a9\u30eb\u30c8\u5024 Usage: >>> data = pnq.query({\"a\", \"b\", \"c\"}) >>> data.get(\"a\") \"a\" >>> data.get(\"d\") raise KeyError(\"d\") >>> data.get(\"d\", 10) 10 pnq.actions. one ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u8981\u7d20\u304c\uff11\u3064\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3057\u3001\u305d\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u691c\u8a3c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 one \u95a2\u6570\u306f\u3001\uff11\u3064\u306e\u8981\u7d20\u3067\u3042\u308b\u304b\u691c\u8a3c\u3059\u308b\u305f\u3081\u306b\uff12\u3064\u76ee\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u305d\u3046\u3068\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u3068\u306a\u308b\u30a4\u30c6\u30e9\u30d6\u30eb\u304c\u5024\u3092\u6d88\u8cbb\u3059\u308b\u5b9f\u88c5\u3060\u3068\u3001\uff12\u3064\u306e\u8981\u7d20\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([]).one() raise NoElementError(\"...\") >>> pnq.query([1]).one() 1 >>> pnq.query([1, 2]).one() raise NotOneElementError(\"...\") >>> pnq.query([]).one(None) None >>> pnq.query([1, 2]).one(None) raise NotOneElementError(\"...\") pnq.actions. first ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30bb\u30c3\u30c8\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408\u3001\u30bb\u30c3\u30c8\u306f\u9806\u5e8f\u3092\u4fdd\u6301\u3057\u306a\u3044\u305f\u3081\u3001\u9806\u5e8f\u6027\u306f\u671f\u5f85\u3067\u304d\u307e\u305b\u3093\u3002 Args: default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([]).first() raise NoElementError(\"...\") >>> pnq.query([1]).first() 1 >>> pnq.query([1, 2]).first() 1 >>> pnq.query([]).first(None) None pnq.actions. last ( self ) \u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6700\u5f8c\u306e\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30bb\u30c3\u30c8\u3092\u30bd\u30fc\u30b9\u3068\u3057\u305f\u5834\u5408\u3001\u30bb\u30c3\u30c8\u306f\u9806\u5e8f\u3092\u4fdd\u6301\u3057\u306a\u3044\u305f\u3081\u3001\u9806\u5e8f\u6027\u306f\u671f\u5f85\u3067\u304d\u307e\u305b\u3093\u3002 Args: default: \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u8fd4\u3059\u5024 Usage: >>> pnq.query([]).last() raise NoElementError(\"...\") >>> pnq.query([1]).last() 1 >>> pnq.query([1, 2]).last() 2 >>> pnq.query([]).last(None) None pnq.actions. get_or ( self , key , default ) pnq.actions. one_or ( self , default ) pnq.actions. first_or ( self , default ) pnq.actions. last_or ( self , default ) pnq.actions. get_or_raise ( self , key , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f get \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 KeyError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 Args: exc: KeyError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).get_or_raise(0, Exception(f\"Not Exist Key: 0\")) raise Exception(\"Not Exist Key: 0\") pnq.actions. one_or_raise ( self , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f one \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 NoElementError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 NotOneElementError\u306f\u30ad\u30e3\u30c3\u30c1\u3057\u307e\u305b\u3093\u3002 Args: exc: NoElementError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).one_or_raise(0, Exception(\"No exists.\")) raise Exception(\"No exists.\") pnq.actions. first_or_raise ( self , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f first \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 NoElementError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 Args: exc: NoElementError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).first_or_raise(0, Exception(\"No exists.\")) raise Exception(\"No exists.\") pnq.actions. last_or_raise ( self , exc ) \u57fa\u672c\u7684\u306a\u52d5\u4f5c\u306f last \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 NoElementError\u304c\u767a\u751f\u3057\u305f\u6642\u3001\u4efb\u610f\u306e\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 Args: exc: NoElementError\u6642\u306b\u767a\u751f\u3055\u305b\u308b\u4f8b\u5916 Usage: >>> pnq.query([]).last_or_raise(0, Exception(\"No exists.\")) raise Exception(\"No exists.\")","title":"Finalizing - Getting"},{"location":"api/#generating","text":"pnq.actions. infinite ( func , *args , **kwargs ) \u6e21\u3057\u305f\u95a2\u6570\u3092\u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: func(args, kwargs): \u7121\u9650\u306b\u5b9f\u884c\u3059\u308b\u95a2\u6570 args: \u95a2\u6570\u306b\u6e21\u3059\u4f4d\u7f6e\u5f15\u6570 kwargs: \u95a2\u6570\u306b\u6e21\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.infinite(datetime.now).take(1).to(list) [datetime.datetime(2021, 9, 10, 3, 57, 54, 402467)] >>> pnq.infinite(datetime, 2020, 1, day=2).take(1).to(list) [datetime.datetime(2010, 1, 2, 0, 0)] pnq.actions. repeat ( value ) \u540c\u3058\u5024\u3092\u7e70\u308a\u8fd4\u3059\u7121\u9650\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Args: value: \u7e70\u308a\u8fd4\u3059\u5024 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.repeat(5).take(3).to(list) [5, 5, 5] pnq.actions. value ( *args , **kwargs ) \uff11\u3064\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u4f4d\u7f6e\u5f15\u6570\u3092\u4e0e\u3048\u305f\u5834\u5408\u306f\u4e0e\u3048\u305f\u5024\u304b\u30bf\u30d7\u30eb\u306b\u306a\u308a\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3092\u4e0e\u3048\u305f\u5834\u5408\u306f\u8f9e\u66f8\u306b\u306a\u308a\u307e\u3059\u3002 Usage: >>> pnq.value(1).to(list) [1] >>> pnq.value(\"a\", \"b\").to(list) [(\"a\", \"b\")] >>> pnq.value(name=\"test\").to(list) [{\"naem\": \"test\"}] pnq.actions. count ( start=0 , step=1 ) \u9023\u7d9a\u3057\u305f\u5024\u3092\u7121\u9650\u306b\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 \u7121\u9650\u306b\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\u3001 take \u7b49\u3067\u7d42\u4e86\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Args: start: \u958b\u59cb\u5024 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.count().take(3).to(list) [0, 1, 2] >>> pnq.count(1, 2).take(3).to(list) [1, 3, 5] pnq.actions. cycle ( iterable , repeat=None ) \u30a4\u30c6\u30e9\u30d6\u30eb\u304c\u8fd4\u3059\u5024\u3092\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Args: iterable: \u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30e9\u30d6\u30eb repeat: \u7e70\u308a\u8fd4\u3059\u56de\u6570\u3002None\u306e\u5834\u5408\u306f\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.cycle([1,2,3]).take(4).to(list) [1, 2, 3, 1] >>> pnq.cycle([1,2,3], repeat=2).to(list) [1, 2, 3, 1, 2, 3] pnq.actions. range ( *args , **kwargs ) \u6307\u5b9a\u3057\u305f\u958b\u59cb\u6570\u3068\u7d42\u4e86\u6570\u307e\u3067\u306e\u9023\u7d9a\u3057\u305f\u5024\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Args: stop: \u7d42\u4e86\u6570 Args: start: \u958b\u59cb\u6570 stop: \u7d42\u4e86\u6570 step: \u5897\u5206 Returns: \u53d6\u5f97\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5185\u5305\u3059\u308b\u30af\u30a8\u30ea Usage: >>> pnq.range(5).to(list) [0, 1, 2, 3, 4] >>> pnq.range(0, 3, 2).to(list) [0, 2, 4]","title":"Generating"},{"location":"class/","text":"class pnq.base.requests. Response ( func , kwargs , err , result , start , end ) Response(func, kwargs, err, result, start, end) class pnq.base.requests. StopWatch ( name='' ) \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u51e6\u7406\u6642\u9593\u3092\u8a08\u6e2c\u3057\u307e\u3059\u3002 Args: name: \u4efb\u610f\u306e\u540d\u524d\u3092\u4ed8\u4e0e\u3067\u304d\u307e\u3059 Members: name: \u521d\u671f\u5316\u6642\u306b\u4ed8\u4e0e\u3057\u305f\u540d\u524d start: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u958b\u59cb\u6642\u9593\uff08UTC\uff09 end: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u5b8c\u4e86\u6642\u9593\uff08UTC\uff09 elapsed: \u958b\u59cb\u6642\u9593\u3068\u5b8c\u4e86\u6642\u9593\u306e\u5dee\u5206\u79d2\u6570 Usage: >>> with StopWatch(\"test\") as result: >>> [x for x in range(10000)] >>> print(result) {'name': 'test', 'start': '2021-09-13T14:10:04.780085+00:00', 'end': '2021-09-13T14:10:11.907716+00:00', 'elapsed': 7.127631} to_dict ( self ) \u8a08\u6e2c\u30c7\u30fc\u30bf\u3092\u8f9e\u66f8\u5316\u3057\u307e\u3059\u3002\u65e5\u4ed8\u30c7\u30fc\u30bf\u306fisoformat\u3067\u51fa\u529b\u3055\u308c\u307e\u3059","title":"\u30af\u30e9\u30b9"},{"location":"exceptions/","text":"Exception classes class pnq.exceptions. PnqException ( msg='' ) Pnq\u306b\u95a2\u9023\u3059\u308b\u5168\u3066\u306e\u4f8b\u5916\u306e\u57fa\u5e95\u30af\u30e9\u30b9 class pnq.exceptions. NotFoundError ( key ) \u30af\u30a8\u30ea\u304c\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u3092\u8981\u6c42\u3057\u305f\u304c\u5b58\u5728\u3057\u306a\u3044\u3002 IndexError\u3068KeyError\u306fKeyNotFoundError\u306b\u7f6e\u304d\u63db\u308f\u308a\u307e\u3059 \u95a2\u9023: get must_get_many class pnq.exceptions. NoElementError ( msg='' ) \u30af\u30a8\u30ea\u304c\u4f55\u3089\u304b\u306e\u8981\u7d20\u3092\u8981\u6c42\u3057\u305f\u304c\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044 \u95a2\u9023: one first last class pnq.exceptions. NotOneElementError ( msg='' ) \u30af\u30a8\u30ea\u304c\u8981\u7d20\u304c\u3072\u3068\u3064\u3067\u3042\u308b\u3053\u3068\u3092\u8981\u6c42\u3057\u305f\u304c\u8907\u6570\u306e\u8981\u7d20\u304c\u5b58\u5728\u3057\u305f \u95a2\u9023: one class pnq.exceptions. DuplicateElementError ( msg='' ) \u30af\u30a8\u30ea\u304c\u8981\u7d20\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u8981\u6c42\u3057\u305f\u304c\u91cd\u8907\u3092\u691c\u77e5\u3057\u305f \u95a2\u9023: must_unique","title":"\u4f8b\u5916\u30af\u30e9\u30b9"},{"location":"exceptions/#exception-classes","text":"class pnq.exceptions. PnqException ( msg='' ) Pnq\u306b\u95a2\u9023\u3059\u308b\u5168\u3066\u306e\u4f8b\u5916\u306e\u57fa\u5e95\u30af\u30e9\u30b9 class pnq.exceptions. NotFoundError ( key ) \u30af\u30a8\u30ea\u304c\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u3092\u8981\u6c42\u3057\u305f\u304c\u5b58\u5728\u3057\u306a\u3044\u3002 IndexError\u3068KeyError\u306fKeyNotFoundError\u306b\u7f6e\u304d\u63db\u308f\u308a\u307e\u3059 \u95a2\u9023: get must_get_many class pnq.exceptions. NoElementError ( msg='' ) \u30af\u30a8\u30ea\u304c\u4f55\u3089\u304b\u306e\u8981\u7d20\u3092\u8981\u6c42\u3057\u305f\u304c\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044 \u95a2\u9023: one first last class pnq.exceptions. NotOneElementError ( msg='' ) \u30af\u30a8\u30ea\u304c\u8981\u7d20\u304c\u3072\u3068\u3064\u3067\u3042\u308b\u3053\u3068\u3092\u8981\u6c42\u3057\u305f\u304c\u8907\u6570\u306e\u8981\u7d20\u304c\u5b58\u5728\u3057\u305f \u95a2\u9023: one class pnq.exceptions. DuplicateElementError ( msg='' ) \u30af\u30a8\u30ea\u304c\u8981\u7d20\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u8981\u6c42\u3057\u305f\u304c\u91cd\u8907\u3092\u691c\u77e5\u3057\u305f \u95a2\u9023: must_unique","title":"Exception classes"},{"location":"naming/","text":"\u6587\u5b57\u5217\u306e\u9023\u7d50 \u73fe\u5728\u306fconcat\u3092\u63a1\u7528 \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\uff11\u3064\u306b\u307e\u3068\u3081\u308b \u95a2\u9023 python: list.extend: \uff12\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b python: str.join: \u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b python: operator.concat: a + b \u3092\u8fd4\u3059 pandas: concat: \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3084\u30b7\u30ea\u30fc\u30ba\u3092\u6a2a\u65b9\u5411\u304b\u7e26\u65b9\u5411\u306b\u9023\u7d50\u3059\u308b excel: CONCATENATE: \u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b javascript: concat: \u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b linq: concat: \u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\uff11\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u3059\u308b \u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9023\u7d50 \u95a2\u9023 python: list.extend: \uff12\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b python: dict.update: \uff12\u3064\u306e\u8f9e\u66f8\u3092\u30de\u30fc\u30b8\u3059\u308b python: dict.update: \uff12\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b linq: concat: \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u9023\u7d50\u3059\u308b","title":"\u6587\u5b57\u5217\u306e\u9023\u7d50"},{"location":"naming/#_1","text":"\u73fe\u5728\u306fconcat\u3092\u63a1\u7528 \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\uff11\u3064\u306b\u307e\u3068\u3081\u308b","title":"\u6587\u5b57\u5217\u306e\u9023\u7d50"},{"location":"naming/#_2","text":"python: list.extend: \uff12\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b python: str.join: \u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b python: operator.concat: a + b \u3092\u8fd4\u3059 pandas: concat: \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3084\u30b7\u30ea\u30fc\u30ba\u3092\u6a2a\u65b9\u5411\u304b\u7e26\u65b9\u5411\u306b\u9023\u7d50\u3059\u308b excel: CONCATENATE: \u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b javascript: concat: \u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b linq: concat: \u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\uff11\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u3059\u308b","title":"\u95a2\u9023"},{"location":"naming/#_3","text":"","title":"\u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9023\u7d50"},{"location":"naming/#_4","text":"python: list.extend: \uff12\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b python: dict.update: \uff12\u3064\u306e\u8f9e\u66f8\u3092\u30de\u30fc\u30b8\u3059\u308b python: dict.update: \uff12\u3064\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b linq: concat: \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u9023\u7d50\u3059\u308b","title":"\u95a2\u9023"},{"location":"performance/","text":"\u6027\u80fd\u8a55\u4fa1 pnq\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6027\u80fd \u5185\u5305\u8868\u8a18\u3068\u6bd4\u8f03\u3059\u308b\u3068 pnq \u306f1.36\u7a0b\u5ea6\u6027\u80fd\u304c\u843d\u3061\u307e\u3059\u3002 \u65e5\u5e38\u7684\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u5834\u5408\u306f\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u8a18\u6cd5\u306b\u66f8\u304d\u76f4\u3059\u3053\u3068\u3082\u691c\u8a0e\u304f\u3060\u3055\u3044\u3002 import pnq from pnq.base.requests import StopWatch from decimal import Decimal , ROUND_HALF_UP RANGE = 100000000 def dummy ( x ): return x with StopWatch ( \"\u5185\u5305\u8868\u8a18\" ) as result_1 : list ( dummy ( x ) for x in range ( RANGE ) if x % 2 ) with StopWatch ( \"\u30a4\u30c6\u30ec\u30fc\u30bf\" ) as result_2 : def iterate (): for i in range ( RANGE ): if i % 2 : yield dummy ( i ) list ( iterate ()) with StopWatch ( \"pnq\" ) as result_3 : pnq . query ( range ( RANGE )) . filter ( lambda x : x % 2 ) . map ( dummy ) . to_list () difference = Decimal ( f \" { result_1 . elapsed } \" ) - Decimal ( f \" { result_3 . elapsed } \" ) rate = Decimal ( f \" { result_3 . elapsed } \" ) / Decimal ( f \" { result_1 . elapsed } \" ) rate = rate . quantize ( Decimal ( \"0.01\" ), rounding = ROUND_HALF_UP ) print ( f \" { result_1 } \" ) print ( f \" { result_2 } \" ) print ( f \" { result_3 } \" ) print ( f \"\u5185\u5305\u8868\u8a18:pnq \u6027\u80fd\u5dee\u5272 \uff1a { rate } \" ) {'name': '\u5185\u5305\u8868\u8a18', 'start': '2021-09-20T12:42:35.219151+00:00', 'end': '2021-09-20T12:42:42.270021+00:00', 'elapsed': 7.05087} {'name': '\u30a4\u30c6\u30ec\u30fc\u30bf', 'start': '2021-09-20T12:42:42.270046+00:00', 'end': '2021-09-20T12:42:49.383548+00:00', 'elapsed': 7.113502} {'name': 'pnq', 'start': '2021-09-20T12:42:49.383573+00:00', 'end': '2021-09-20T12:42:58.979269+00:00', 'elapsed': 9.595696} \u5185\u5305\u8868\u8a18:pnq \u6027\u80fd\u5dee\u5272 \uff1a1.36 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6027\u80fd \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3088\u308a\u6027\u80fd\u304c2.25\u500d\u7a0b\u5ea6\u9045\u3044\u3067\u3059\u3002 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30afI/O\u3084\u30d5\u30a1\u30a4\u30ebI/O\u306a\u3069\u306e\u5f85\u6a5f\u6642\u9593\u3067\u3001 \u4e26\u5217\u51e6\u7406\u3067\u304d\u308b\u30b1\u30fc\u30b9\u3067\u6709\u52b9\u3067\u3059\u3002 \u7279\u306b\u7406\u7531\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u7a4d\u6975\u7684\u306b\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 import asyncio from decimal import Decimal , ROUND_HALF_UP from pnq.models import StopWatch class Range : def __init__ ( self , count ): self . count = count def __iter__ ( self ): for i in range ( self . count ): yield i async def __aiter__ ( self ): for i in range ( self . count ): yield i calculator = Range ( 100000000 ) async def main (): with StopWatch () as result_1 : for i in calculator : pass with StopWatch () as result_2 : async for i in calculator : pass difference = Decimal ( f \" { result_1 . elapsed } \" ) - Decimal ( f \" { result_2 . elapsed } \" ) rate = Decimal ( f \" { result_2 . elapsed } \" ) / Decimal ( f \" { result_1 . elapsed } \" ) rate = rate . quantize ( Decimal ( \"0.01\" ), rounding = ROUND_HALF_UP ) print ( f \"\u540c\u671f\u3000\u3000\u3000\u3000\u3000\uff1a { result_1 } \" ) print ( f \"\u975e\u540c\u671f\u3000\u3000\u3000\u3000\uff1a { result_2 } \" ) print ( f \"\u6027\u80fd\u5dee\u5272\u5408\u3000\u3000\uff1a { rate } \" ) asyncio . run ( main ()) \u540c\u671f\u3000\u3000\u3000\u3000\u3000\uff1a{'start': '2021-09-13T10:28:55.240113+00:00', 'end': '2021-09-13T10:28:58.890342+00:00', 'elapsed': 3.650229} \u975e\u540c\u671f\u3000\u3000\u3000\u3000\uff1a{'start': '2021-09-13T10:28:58.890577+00:00', 'end': '2021-09-13T10:29:07.085747+00:00', 'elapsed': 8.19517} \u6027\u80fd\u52a3\u5316\u7387\u3000\u3000\uff1a2.25","title":"\u6027\u80fd"},{"location":"performance/#_1","text":"","title":"\u6027\u80fd\u8a55\u4fa1"},{"location":"performance/#pnq","text":"\u5185\u5305\u8868\u8a18\u3068\u6bd4\u8f03\u3059\u308b\u3068 pnq \u306f1.36\u7a0b\u5ea6\u6027\u80fd\u304c\u843d\u3061\u307e\u3059\u3002 \u65e5\u5e38\u7684\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u5834\u5408\u306f\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u8a18\u6cd5\u306b\u66f8\u304d\u76f4\u3059\u3053\u3068\u3082\u691c\u8a0e\u304f\u3060\u3055\u3044\u3002 import pnq from pnq.base.requests import StopWatch from decimal import Decimal , ROUND_HALF_UP RANGE = 100000000 def dummy ( x ): return x with StopWatch ( \"\u5185\u5305\u8868\u8a18\" ) as result_1 : list ( dummy ( x ) for x in range ( RANGE ) if x % 2 ) with StopWatch ( \"\u30a4\u30c6\u30ec\u30fc\u30bf\" ) as result_2 : def iterate (): for i in range ( RANGE ): if i % 2 : yield dummy ( i ) list ( iterate ()) with StopWatch ( \"pnq\" ) as result_3 : pnq . query ( range ( RANGE )) . filter ( lambda x : x % 2 ) . map ( dummy ) . to_list () difference = Decimal ( f \" { result_1 . elapsed } \" ) - Decimal ( f \" { result_3 . elapsed } \" ) rate = Decimal ( f \" { result_3 . elapsed } \" ) / Decimal ( f \" { result_1 . elapsed } \" ) rate = rate . quantize ( Decimal ( \"0.01\" ), rounding = ROUND_HALF_UP ) print ( f \" { result_1 } \" ) print ( f \" { result_2 } \" ) print ( f \" { result_3 } \" ) print ( f \"\u5185\u5305\u8868\u8a18:pnq \u6027\u80fd\u5dee\u5272 \uff1a { rate } \" ) {'name': '\u5185\u5305\u8868\u8a18', 'start': '2021-09-20T12:42:35.219151+00:00', 'end': '2021-09-20T12:42:42.270021+00:00', 'elapsed': 7.05087} {'name': '\u30a4\u30c6\u30ec\u30fc\u30bf', 'start': '2021-09-20T12:42:42.270046+00:00', 'end': '2021-09-20T12:42:49.383548+00:00', 'elapsed': 7.113502} {'name': 'pnq', 'start': '2021-09-20T12:42:49.383573+00:00', 'end': '2021-09-20T12:42:58.979269+00:00', 'elapsed': 9.595696} \u5185\u5305\u8868\u8a18:pnq \u6027\u80fd\u5dee\u5272 \uff1a1.36","title":"pnq\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6027\u80fd"},{"location":"performance/#_2","text":"\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3088\u308a\u6027\u80fd\u304c2.25\u500d\u7a0b\u5ea6\u9045\u3044\u3067\u3059\u3002 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30afI/O\u3084\u30d5\u30a1\u30a4\u30ebI/O\u306a\u3069\u306e\u5f85\u6a5f\u6642\u9593\u3067\u3001 \u4e26\u5217\u51e6\u7406\u3067\u304d\u308b\u30b1\u30fc\u30b9\u3067\u6709\u52b9\u3067\u3059\u3002 \u7279\u306b\u7406\u7531\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u7a4d\u6975\u7684\u306b\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 import asyncio from decimal import Decimal , ROUND_HALF_UP from pnq.models import StopWatch class Range : def __init__ ( self , count ): self . count = count def __iter__ ( self ): for i in range ( self . count ): yield i async def __aiter__ ( self ): for i in range ( self . count ): yield i calculator = Range ( 100000000 ) async def main (): with StopWatch () as result_1 : for i in calculator : pass with StopWatch () as result_2 : async for i in calculator : pass difference = Decimal ( f \" { result_1 . elapsed } \" ) - Decimal ( f \" { result_2 . elapsed } \" ) rate = Decimal ( f \" { result_2 . elapsed } \" ) / Decimal ( f \" { result_1 . elapsed } \" ) rate = rate . quantize ( Decimal ( \"0.01\" ), rounding = ROUND_HALF_UP ) print ( f \"\u540c\u671f\u3000\u3000\u3000\u3000\u3000\uff1a { result_1 } \" ) print ( f \"\u975e\u540c\u671f\u3000\u3000\u3000\u3000\uff1a { result_2 } \" ) print ( f \"\u6027\u80fd\u5dee\u5272\u5408\u3000\u3000\uff1a { rate } \" ) asyncio . run ( main ()) \u540c\u671f\u3000\u3000\u3000\u3000\u3000\uff1a{'start': '2021-09-13T10:28:55.240113+00:00', 'end': '2021-09-13T10:28:58.890342+00:00', 'elapsed': 3.650229} \u975e\u540c\u671f\u3000\u3000\u3000\u3000\uff1a{'start': '2021-09-13T10:28:58.890577+00:00', 'end': '2021-09-13T10:29:07.085747+00:00', 'elapsed': 8.19517} \u6027\u80fd\u52a3\u5316\u7387\u3000\u3000\uff1a2.25","title":"\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6027\u80fd"},{"location":"quick_start/","text":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u307e\u305a\u3001 pnq \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pip install pnq \u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u308b pnq.query \u3092\u4ecb\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u52a0\u5de5\u3059\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30a4\u30f3\u3067\u304d\u307e\u3059\u3002 \u7d44\u307f\u7acb\u3066\u305f\u30af\u30a8\u30ea\u306f\u3001 save \u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5b9f\u4f53\u5316\u3067\u304d\u307e\u3059\u3002 import pnq pnq . query ([ 1 , 2 ]) . map ( lambda x : x * 2 ) . filter ( lambda x : x > 2 ) . save () # => [4] save \u3067\u8fd4\u3055\u308c\u308b\u30ea\u30b9\u30c8\u306f\u3001\u30ea\u30b9\u30c8\u3092\u7d99\u627f\u3057\u305f\u72ec\u81ea\u62e1\u5f35\u30af\u30e9\u30b9\uff08 pnq.list \uff09\u3067\u3001\u5f15\u304d\u7d9a\u304d\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30a4\u30f3\u3067\u304d\u307e\u3059\u3002 import pnq saved = pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . save () saved . map ( lambda x : x * 2 ) . save () # => [4] pnq.list \u306f\u30ea\u30b9\u30c8\u3068\u5b8c\u5168\u306a\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u53ef\u80fd\u306a\u9650\u308a\u526f\u4f5c\u7528\u3092\u907f\u3051\u308b\u5834\u5408\u306f\u3001 to(list) \u307e\u305f\u306f\u5358\u306b list \u3067\u7d44\u8fbc\u307f\u306e\u30ea\u30b9\u30c8\u306b\u3067\u304d\u307e\u3059\u3002 import pnq pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . to ( list ) # => [2] list ( pnq . query ([ 1 ]) . map ( lambda x : x * 2 )) # => [2] \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\u8f9e\u66f8\u306e\u5834\u5408\u306f\u3001\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u30da\u30a2\u304c\u5217\u6319\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 import pnq pnq . query ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) . filter ( lambda x : x [ 1 ] > 1 ) . save () # => [(\"b\", 2), (\"c\", 3)] \u30ea\u30b9\u30c8\u3067\u306a\u304f\u8f9e\u66f8\u3068\u3057\u3066\u5b9f\u4f53\u5316\u3057\u305f\u3044\u5834\u5408\u306f\u3001 save \u306e\u4ee3\u308f\u308a\u306b to(dict) \u307e\u305f\u306f\u5358\u306b dict \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 import pnq pnq . query ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) . filter ( lambda x : x [ 1 ] > 1 ) . to ( dict ) # => {\"b\": 2, \"c\": 3} dict ( pnq . query ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) . filter ( lambda x : x [ 1 ] > 1 )) # => {\"b\": 2, \"c\": 3} \u306a\u304a\u3001 to \u306f\u30a4\u30c6\u30e9\u30d6\u30eb\u3092\u5f15\u6570\u3068\u3059\u308b\u4efb\u610f\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6271\u3046 pnq.query \u306f\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3082\u53d6\u308a\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5b9f\u4f53\u5316\u3059\u308b\u306b\u306f save \u306e\u4ee3\u308f\u308a\u306b await \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 import asyncio import pnq async def aiter (): yield 1 yield 2 yield 3 async def main (): return await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) asyncio . run ( main ()) # >> [2, 4, 6] \u30af\u30a8\u30ea\u306f for \u6587\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 import asyncio import pnq async def aiter (): yield 4 yield 5 yield 6 async def main (): for x in pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ): print ( x ) # => 2, 4, 6 async for x in pnq . query ( aiter ()) . map ( lambda x : x * 2 ): print ( x ) # => 8, 10, 12 asyncio . run ( main ()) \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b pnq.query \u306f\u53ef\u80fd\u306a\u9650\u308a\u8a55\u4fa1\u3092\u4fdd\u7559\uff08\u9045\u5ef6\u8a55\u4fa1\uff09\u3057\u307e\u3059\u3002 \u30af\u30a8\u30ea\u306f\u3001\u8a55\u4fa1\u3092\u8981\u6c42\u3055\u308c\u305f\u3068\u304d\u5b9f\u969b\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u3059\u3067\u306b\u3044\u304f\u3064\u304b\u8a55\u4fa1\u65b9\u6cd5\uff08 for \u6587\u3001 save \u3001 to \uff09\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u307b\u304b\u306b\u3082\u3044\u304f\u3064\u304b\u8a55\u4fa1\u30e1\u30bd\u30c3\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 import pnq # for x in ...: func(x)\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059 pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) . each ( print ) # => 2, 4, 6 # \u8981\u7d20\u306e\u5408\u8a08\u3092\u6c42\u3081\u307e\u3059 pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) . sum () # => 12 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3068\u3059\u308b\u5834\u5408\u306f\u3001 _ \u3067\u660e\u793a\u7684\u306b\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8a55\u4fa1\u3059\u308b\u3068\u4f1d\u3048\u3001 await \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 import asyncio import pnq async def aiter (): yield 1 yield 2 yield 3 async def main (): await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) . _ . each ( print ) # => 2, 4, 6 await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) . _ . sum () # => 12 asyncio . run ( main ()) \u30d0\u30c3\u30c1\u51e6\u7406\u306b\u6d3b\u7528\u3059\u308b request \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7c21\u6613\u7684\u306a\u30d0\u30c3\u30c1\u51e6\u7406\u306b\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002 request \u30e1\u30bd\u30c3\u30c9\u306f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u4efb\u610f\u306e\u95a2\u6570\u306b\u9001\u51fa\u3057\u3001\u5b9f\u884c\u7d50\u679c\uff08 pnq.Response \uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 \u51e6\u7406\u4e2d\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u4f8b\u5916\u60c5\u5831\u304c err msg stack_trace \u5c5e\u6027\u306b\u30a8\u30e9\u30fc\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 import datetime import logging import pnq log_name = \"log_\" + datetime . datetime . utcnow () . isoformat () + \".jsonl.log\" log = logging . FileHandler ( filename = log_name ) logger = logging . getLogger () logger . addHandler ( log ) params = pnq . query ([{ \"val\" : 0 }, { \"val\" : 1 }]) # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u95a2\u6570\u306b\u6e21\u3057\u307e\u3059 # \u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3068\u3057\u3066\u30a2\u30f3\u30d1\u30c3\u30af\u3055\u308c\u308b\u305f\u3081\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u8f9e\u66f8\u4e92\u63db\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 @params . request def do_something ( val ): if not ( val > 0 ): raise ValueError ( f \"val must be 1 or greater. But got { val } \" ) else : return \"success\" # \u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5b9f\u884c\u60c5\u5831\u3092jsonl\uff08\uff11\u884c\uff11Json\uff09\u5f62\u5f0f\u3067\u51fa\u529b\u3057\u307e\u3059 @do_something . each def dump_if_error ( x : pnq . Response ): # \u30a8\u30e9\u30fc\u3060\u3063\u305f\u5834\u5408\u3001\u30ed\u30b0\u306b\u51fa\u529b\u3057\u307e\u3059 if x . err : # \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u3092json\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u307e\u3059 # \u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067`json.dumps`(ensure_ascii=False)\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059 logger . error ( x . to_json ()) # \u5168\u3066\u306e\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u306f`0`\u3001\u3044\u305a\u308c\u304b\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306f`1`\u3092\u8fd4\u3057\u307e\u3059 exit ( pnq . from_jsonl ( log_name ) . exists ()) \u30a8\u30e9\u30fc\u30ed\u30b0\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002 cat ` ls *.jsonl.log ` # {\"func\": \"do_something\", \"kwargs\": {\"val\": 0}, \"err\": \"ValueError\", \"msg\": \"val must be 1 or greater: 0\", \"result\": None, ...} \u3082\u3063\u3068\u77e5\u308a\u305f\u3044 \u3053\u308c\u3067\u3042\u306a\u305f\u306f\u30af\u30a8\u30ea\u3092\u81ea\u7531\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306f\u305a\u3067\u3059\u3002 \u6b21\u7ae0\u306e\u53c2\u8003\u4f8b\u304b\u3089\u304a\u6c17\u306b\u5165\u308a\u306e\u6a5f\u80fd\u3092\u898b\u3064\u3051\u307e\u3057\u3087\u3046\u3002","title":"\u5165\u9580"},{"location":"quick_start/#_1","text":"\u307e\u305a\u3001 pnq \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pip install pnq","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"quick_start/#_2","text":"pnq.query \u3092\u4ecb\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u52a0\u5de5\u3059\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30a4\u30f3\u3067\u304d\u307e\u3059\u3002 \u7d44\u307f\u7acb\u3066\u305f\u30af\u30a8\u30ea\u306f\u3001 save \u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5b9f\u4f53\u5316\u3067\u304d\u307e\u3059\u3002 import pnq pnq . query ([ 1 , 2 ]) . map ( lambda x : x * 2 ) . filter ( lambda x : x > 2 ) . save () # => [4] save \u3067\u8fd4\u3055\u308c\u308b\u30ea\u30b9\u30c8\u306f\u3001\u30ea\u30b9\u30c8\u3092\u7d99\u627f\u3057\u305f\u72ec\u81ea\u62e1\u5f35\u30af\u30e9\u30b9\uff08 pnq.list \uff09\u3067\u3001\u5f15\u304d\u7d9a\u304d\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30a4\u30f3\u3067\u304d\u307e\u3059\u3002 import pnq saved = pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . save () saved . map ( lambda x : x * 2 ) . save () # => [4] pnq.list \u306f\u30ea\u30b9\u30c8\u3068\u5b8c\u5168\u306a\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u53ef\u80fd\u306a\u9650\u308a\u526f\u4f5c\u7528\u3092\u907f\u3051\u308b\u5834\u5408\u306f\u3001 to(list) \u307e\u305f\u306f\u5358\u306b list \u3067\u7d44\u8fbc\u307f\u306e\u30ea\u30b9\u30c8\u306b\u3067\u304d\u307e\u3059\u3002 import pnq pnq . query ([ 1 ]) . map ( lambda x : x * 2 ) . to ( list ) # => [2] list ( pnq . query ([ 1 ]) . map ( lambda x : x * 2 )) # => [2] \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\u8f9e\u66f8\u306e\u5834\u5408\u306f\u3001\u30ad\u30fc\u30d0\u30ea\u30e5\u30fc\u30da\u30a2\u304c\u5217\u6319\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 import pnq pnq . query ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) . filter ( lambda x : x [ 1 ] > 1 ) . save () # => [(\"b\", 2), (\"c\", 3)] \u30ea\u30b9\u30c8\u3067\u306a\u304f\u8f9e\u66f8\u3068\u3057\u3066\u5b9f\u4f53\u5316\u3057\u305f\u3044\u5834\u5408\u306f\u3001 save \u306e\u4ee3\u308f\u308a\u306b to(dict) \u307e\u305f\u306f\u5358\u306b dict \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 import pnq pnq . query ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) . filter ( lambda x : x [ 1 ] > 1 ) . to ( dict ) # => {\"b\": 2, \"c\": 3} dict ( pnq . query ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) . filter ( lambda x : x [ 1 ] > 1 )) # => {\"b\": 2, \"c\": 3} \u306a\u304a\u3001 to \u306f\u30a4\u30c6\u30e9\u30d6\u30eb\u3092\u5f15\u6570\u3068\u3059\u308b\u4efb\u610f\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u308b"},{"location":"quick_start/#_3","text":"pnq.query \u306f\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3082\u53d6\u308a\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5b9f\u4f53\u5316\u3059\u308b\u306b\u306f save \u306e\u4ee3\u308f\u308a\u306b await \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 import asyncio import pnq async def aiter (): yield 1 yield 2 yield 3 async def main (): return await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) asyncio . run ( main ()) # >> [2, 4, 6] \u30af\u30a8\u30ea\u306f for \u6587\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 import asyncio import pnq async def aiter (): yield 4 yield 5 yield 6 async def main (): for x in pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ): print ( x ) # => 2, 4, 6 async for x in pnq . query ( aiter ()) . map ( lambda x : x * 2 ): print ( x ) # => 8, 10, 12 asyncio . run ( main ())","title":"\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6271\u3046"},{"location":"quick_start/#_4","text":"pnq.query \u306f\u53ef\u80fd\u306a\u9650\u308a\u8a55\u4fa1\u3092\u4fdd\u7559\uff08\u9045\u5ef6\u8a55\u4fa1\uff09\u3057\u307e\u3059\u3002 \u30af\u30a8\u30ea\u306f\u3001\u8a55\u4fa1\u3092\u8981\u6c42\u3055\u308c\u305f\u3068\u304d\u5b9f\u969b\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u3059\u3067\u306b\u3044\u304f\u3064\u304b\u8a55\u4fa1\u65b9\u6cd5\uff08 for \u6587\u3001 save \u3001 to \uff09\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u307b\u304b\u306b\u3082\u3044\u304f\u3064\u304b\u8a55\u4fa1\u30e1\u30bd\u30c3\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 import pnq # for x in ...: func(x)\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059 pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) . each ( print ) # => 2, 4, 6 # \u8981\u7d20\u306e\u5408\u8a08\u3092\u6c42\u3081\u307e\u3059 pnq . query ([ 1 , 2 , 3 ]) . map ( lambda x : x * 2 ) . sum () # => 12 \u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3068\u3059\u308b\u5834\u5408\u306f\u3001 _ \u3067\u660e\u793a\u7684\u306b\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8a55\u4fa1\u3059\u308b\u3068\u4f1d\u3048\u3001 await \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 import asyncio import pnq async def aiter (): yield 1 yield 2 yield 3 async def main (): await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) . _ . each ( print ) # => 2, 4, 6 await pnq . query ( aiter ()) . map ( lambda x : x * 2 ) . _ . sum () # => 12 asyncio . run ( main ())","title":"\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b"},{"location":"quick_start/#_5","text":"request \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7c21\u6613\u7684\u306a\u30d0\u30c3\u30c1\u51e6\u7406\u306b\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002 request \u30e1\u30bd\u30c3\u30c9\u306f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u8981\u7d20\u3092\u4efb\u610f\u306e\u95a2\u6570\u306b\u9001\u51fa\u3057\u3001\u5b9f\u884c\u7d50\u679c\uff08 pnq.Response \uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 \u51e6\u7406\u4e2d\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u4f8b\u5916\u60c5\u5831\u304c err msg stack_trace \u5c5e\u6027\u306b\u30a8\u30e9\u30fc\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 import datetime import logging import pnq log_name = \"log_\" + datetime . datetime . utcnow () . isoformat () + \".jsonl.log\" log = logging . FileHandler ( filename = log_name ) logger = logging . getLogger () logger . addHandler ( log ) params = pnq . query ([{ \"val\" : 0 }, { \"val\" : 1 }]) # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u95a2\u6570\u306b\u6e21\u3057\u307e\u3059 # \u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3068\u3057\u3066\u30a2\u30f3\u30d1\u30c3\u30af\u3055\u308c\u308b\u305f\u3081\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u8f9e\u66f8\u4e92\u63db\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 @params . request def do_something ( val ): if not ( val > 0 ): raise ValueError ( f \"val must be 1 or greater. But got { val } \" ) else : return \"success\" # \u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5b9f\u884c\u60c5\u5831\u3092jsonl\uff08\uff11\u884c\uff11Json\uff09\u5f62\u5f0f\u3067\u51fa\u529b\u3057\u307e\u3059 @do_something . each def dump_if_error ( x : pnq . Response ): # \u30a8\u30e9\u30fc\u3060\u3063\u305f\u5834\u5408\u3001\u30ed\u30b0\u306b\u51fa\u529b\u3057\u307e\u3059 if x . err : # \u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u3092json\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u307e\u3059 # \u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067`json.dumps`(ensure_ascii=False)\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059 logger . error ( x . to_json ()) # \u5168\u3066\u306e\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u306f`0`\u3001\u3044\u305a\u308c\u304b\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306f`1`\u3092\u8fd4\u3057\u307e\u3059 exit ( pnq . from_jsonl ( log_name ) . exists ()) \u30a8\u30e9\u30fc\u30ed\u30b0\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002 cat ` ls *.jsonl.log ` # {\"func\": \"do_something\", \"kwargs\": {\"val\": 0}, \"err\": \"ValueError\", \"msg\": \"val must be 1 or greater: 0\", \"result\": None, ...}","title":"\u30d0\u30c3\u30c1\u51e6\u7406\u306b\u6d3b\u7528\u3059\u308b"},{"location":"quick_start/#_6","text":"\u3053\u308c\u3067\u3042\u306a\u305f\u306f\u30af\u30a8\u30ea\u3092\u81ea\u7531\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306f\u305a\u3067\u3059\u3002 \u6b21\u7ae0\u306e\u53c2\u8003\u4f8b\u304b\u3089\u304a\u6c17\u306b\u5165\u308a\u306e\u6a5f\u80fd\u3092\u898b\u3064\u3051\u307e\u3057\u3087\u3046\u3002","title":"\u3082\u3063\u3068\u77e5\u308a\u305f\u3044"},{"location":"research/","text":"\u8abf\u67fb Linq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001type hint\u3068\u89aa\u548c\u6027\u304c\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u67fb\u3057\u305f\u3002 \u7d50\u8ad6\u3068\u3057\u3066\u3001type hint\u3092\u6700\u5927\u306b\u6d3b\u7528\u3057\u305flinq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u306a\u3044\u3088\u3046\u3060\u3002 pyfunctional https://github.com/EntilZha/PyFunctional star: 1.9k \u6a5f\u80fd\u306f\u591a\u3044\u3002 \u578b\u60c5\u5831\u306f\u4f1d\u642c\u3057\u306a\u3044\u3002 rx python\u306ereactive extension\u306e\u5b9f\u88c5\u3002 Linq\u3068\u306f\u5c11\u3005\u7570\u306a\u308b\u3002 pyLINQ star: 2 type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044 pinq type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044 linqish \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3082\u3046\u6b7b\u3093\u3067\u3044\u308b PYNQ \u540d\u524d\u304cLINQ\u3063\u307d\u3044\u304cPython\u3067FPGA\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002","title":"\u8abf\u67fb"},{"location":"research/#_1","text":"Linq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001type hint\u3068\u89aa\u548c\u6027\u304c\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u67fb\u3057\u305f\u3002 \u7d50\u8ad6\u3068\u3057\u3066\u3001type hint\u3092\u6700\u5927\u306b\u6d3b\u7528\u3057\u305flinq\u30e9\u30a4\u30af\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u306a\u3044\u3088\u3046\u3060\u3002","title":"\u8abf\u67fb"},{"location":"research/#pyfunctional","text":"https://github.com/EntilZha/PyFunctional star: 1.9k \u6a5f\u80fd\u306f\u591a\u3044\u3002 \u578b\u60c5\u5831\u306f\u4f1d\u642c\u3057\u306a\u3044\u3002","title":"pyfunctional"},{"location":"research/#rx","text":"python\u306ereactive extension\u306e\u5b9f\u88c5\u3002 Linq\u3068\u306f\u5c11\u3005\u7570\u306a\u308b\u3002","title":"rx"},{"location":"research/#pylinq-star-2","text":"type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044","title":"pyLINQ star: 2"},{"location":"research/#pinq","text":"type hint\u304c\u52b9\u304b\u306a\u3044\u3002\u6a5f\u80fd\u306f\u5c11\u306a\u304fstar\u3082\u5c11\u306a\u3044","title":"pinq"},{"location":"research/#linqish","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3082\u3046\u6b7b\u3093\u3067\u3044\u308b","title":"linqish"},{"location":"research/#pynq","text":"\u540d\u524d\u304cLINQ\u3063\u307d\u3044\u304cPython\u3067FPGA\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002","title":"PYNQ"}]}